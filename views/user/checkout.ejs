
<%- include('../partials/user/header.ejs') %>

<!-- Add Material Icons font -->
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<style>
    .breadcrumb a,
    .breadcrumb span {
        display: inline-block;
        margin-right: 5px;
    }

    .breadcrumb .separator {
        margin: 0 8px;
        color: #999;
    }

    .card-body {
        padding: 1.25rem;
    }

    .card-header {
        padding: 1rem 1.25rem;
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .card-header h4 {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .dropdown{
        position:relative;
        display:inline-block;
    }
    .dropdown-content{
        display: none;
        position: absolute;
        background-color: white;
        min-width: 160px;
        box-shadow: 0px 8px 16px 0px rgb(0,0,0,0,2);
        z-index: 1000;
        right: 0;
    }
    .dropdown-content a {
        color: black;
        padding: 12px 16px;
        text-decoration: none;
        display: block;
        width: 100%;
    }
    .dropdown-content a:hover{
        background-color: #f1f1f1;
    }
    .dropdown:hover .dropdown-content{
        display:block;
    }
    .header{
        position: relative;
        z-index: 500;
    }

    /* Dashboard menu styles */
    .dashboard-menu .nav-link {
        display: flex;
        align-items: center;
        padding: 12px 15px;
        color: #666;
        transition: all 0.3s ease;
    }

    .dashboard-menu .nav-link i {
        margin-right: 10px;
        font-size: 20px;
    }

    .dashboard-menu .nav-link:hover,
    .dashboard-menu .nav-link.active {
        background-color: #f8f9fa;
        color: #3BB77E;
    }

    /* Checkout styles */
    .checkout-section {
        margin-bottom: 2rem;
    }

    .checkout-section-title {
        font-weight: 600;
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #dee2e6;
    }

    /* Address styles */
    .address-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .address-card {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        position: relative;
        transition: all 0.3s ease;
    }

    .address-card:hover {
        border-color: #3BB77E;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .address-card.selected {
        border-color: #3BB77E;
        background-color: rgba(59, 183, 126, 0.05);
    }

    .address-card .address-type {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background-color: #f8f9fa;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 600;
        color: #6c757d;
    }

    .address-card .address-type.default {
        background-color: #3BB77E;
        color: white;
    }

    .address-card .address-name {
        font-weight: 600;
        margin-bottom: 0.5rem;
        padding-right: 4rem;
    }

    .address-card .address-details {
        color: #6c757d;
        font-size: 0.9rem;
        line-height: 1.5;
    }

    .address-card .address-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 1rem;
    }

    .address-card .address-actions a {
        color: #3BB77E;
        margin-left: 1rem;
        font-size: 0.9rem;
    }

    .add-address-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        border: 1px dashed #dee2e6;
        border-radius: 8px;
        color: #3BB77E;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .add-address-btn:hover {
        border-color: #3BB77E;
        background-color: rgba(59, 183, 126, 0.05);
    }

    .add-address-btn i {
        margin-right: 0.5rem;
        font-size: 1.25rem;
    }

    /* Product styles */
    .checkout-products {
        margin-bottom: 1.5rem;
    }

    .checkout-product {
        display: flex;
        align-items: center;
        padding: 1rem 0;
        border-bottom: 1px solid #dee2e6;
    }

    .checkout-product:last-child {
        border-bottom: none;
    }

    .checkout-product-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 4px;
        margin-right: 1rem;
    }

    .checkout-product-details {
        flex-grow: 1;
    }

    .checkout-product-name {
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .checkout-product-variant {
        font-size: 0.85rem;
        color: #6c757d;
        margin-bottom: 0.25rem;
    }

    .checkout-product-price {
        color: #3BB77E;
        font-weight: 600;
    }

    .checkout-product-quantity {
        margin: 0 1.5rem;
        font-weight: 500;
    }

    .checkout-product-total {
        font-weight: 600;
        min-width: 80px;
        text-align: right;
    }

    /* Summary styles */
    .checkout-summary {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 1.5rem;
    }

    .checkout-summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.75rem;
    }

    .checkout-summary-row:last-child {
        margin-bottom: 0;
        padding-top: 0.75rem;
        border-top: 1px solid #dee2e6;
        font-weight: 600;
        font-size: 1.1rem;
    }
    .checkout-summary-title{
        font-weight: 600;
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #dee2e6;
    }
    .checkout-summary-label {
        color: #6c757d;
    }

    .checkout-summary-value {
        font-weight: 500;
    }

    .checkout-summary-value.discount {
        color: #3BB77E;
    }

    /* Payment methods */
    .payment-methods {
        margin-top: 1.5rem;
    }

    .payment-method {
        display: flex;
        align-items: center;
        padding: 1rem;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        margin-bottom: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .payment-method:hover {
        border-color: #3BB77E;
        background-color: rgba(59, 183, 126, 0.05);
    }

    .payment-method.selected {
        border-color: #3BB77E;
        background-color: rgba(59, 183, 126, 0.05);
    }

    .payment-method-icon {
        width: 40px;
        height: 40px;
        margin-right: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f8f9fa;
        border-radius: 4px;
    }

    .payment-method-icon img {
        max-width: 100%;
        max-height: 100%;
    }

    .payment-method-details {
        flex-grow: 1;
    }

    .payment-method-name {
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .payment-method-description {
        font-size: 0.85rem;
        color: #6c757d;
    }

    .payment-method-radio {
        margin-left: 1rem;
    }

    /* Place order button */
    .place-order-btn {
        display: block;
        width: 100%;
        padding: 1rem;
        background-color: #3BB77E;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        text-align: center;
        margin-top: 1.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .place-order-btn:hover {
        background-color: #2f9b6a;
    }

    /* Responsive adjustments */
    @media (max-width: 767.98px) {
        .address-list {
            grid-template-columns: 1fr;
        }

        .checkout-product {
            flex-wrap: wrap;
        }

        .checkout-product-image {
            margin-bottom: 1rem;
        }

        .checkout-product-quantity {
            margin: 0.5rem 0;
            width: 100%;
        }

        .checkout-product-total {
            width: 100%;
            text-align: left;
            margin-top: 0.5rem;
        }
    }

    .payment-method {
  border: 2px solid transparent;   
  border-radius: 6px;
  padding: 12px;
  cursor: pointer;
  transition: border-color 0.2s ease;
}

.payment-method.selected {
  border-color: #3BB77E;            
}

.address-card {
  border: 2px solid transparent;
  border-radius: 6px;
  padding: 12px;
  margin-bottom: 12px;
  cursor: pointer;
  transition: border-color 0.2s ease;
}

.address-card.selected {
  border-color: #3BB77E;
}


/* default */

.default-badge {
  background-color: #4caf50;
  color: white;
  padding: 2px 8px;
  font-size: 12px;
  border-radius: 12px;
  margin-left: 8px;
  display: inline-block;
  vertical-align: middle;
}

.set-default {
  margin-left: 10px;
  color: #007bff;
  cursor: pointer;
}

.selected {
  border: 2px solid #4caf50;
  box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
}

  /* .coupon-section {
    margin-bottom: 1.5rem;
  }
  
  .coupon-input {
    display: flex;
    margin-bottom: 10px;
  }
  
  .coupon-input input {
    flex: 1;
    padding: 8px 15px;
    border: 1px solid #dee2e6;
    border-radius: 4px 0 0 4px;
    font-size: 14px;
  }
  
  .coupon-input button {
    padding: 8px 15px;
    background-color: #3BB77E;
    color: white;
    border: none;
    border-radius: 0 4px 4px 0;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .coupon-input button:hover {
    background-color: #2f9b6a;
  }
  
  .coupon-dropdown {
    display: none;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    max-height: 200px;
    overflow-y: auto;
    margin-bottom: 15px;
  }
  
  .coupon-dropdown.active {
    display: block;
  }
  
  .coupon-item {
    padding: 10px 15px;
    border-bottom: 1px solid #f1f1f1;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .coupon-item:last-child {
    border-bottom: none;
  }
  
  .coupon-item:hover {
    background-color: #f8f9fa;
  }
  
  .coupon-code {
    font-weight: 600;
    color: #3BB77E;
    margin-right: 10px;
  }
  
  .coupon-description {
    font-size: 12px;
    color: #6c757d;
  }
  
  .coupon-invalid {
    color: #dc3545;
    font-size: 12px;
    margin-top: 5px;
    display: none;
  }
  coupon
  .coupon-valid {
    color: #3BB77E;
    font-size: 12px;
    margin-top: 5px;
    display: none;
  }
  
  .coupon-summary-row {
    color: #3BB77E;
    font-weight: 500;
  }

  .remove-coupon-btn {
  background: none;
  border: none;
  color: #dc3545;
  font-size: 12px;
  padding: 0 5px;
  cursor: pointer;
  margin-left: 5px;
}

.remove-coupon-btn:hover {
  text-decoration: underline;
} */

/* Coupon section styles */
  .coupon-section {
    margin-bottom: 1.5rem;
  }
  
  .coupon-input {
    display: flex;
    margin-bottom: 10px;
    gap: 5px;
  }
  
  .coupon-input input {
    flex: 1;
    padding: 8px 15px;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    font-size: 14px;
  }
  
  .coupon-input button {
    padding: 8px 15px;
    background-color: #3BB77E;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 12px;
  }
  
  .coupon-input button:hover {
    background-color: #2f9b6a;
  }
  
  .select-coupon-btn {
    background-color: #6c757d !important;
    white-space: nowrap;
  }
  
  .select-coupon-btn:hover {
    background-color: #5a6268 !important;
  }
  
  .coupon-dropdown {
    display: none;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    max-height: 200px;
    overflow-y: auto;
    margin-bottom: 15px;
  }
  
  .coupon-dropdown.active {
    display: block;
  }
  
  .coupon-item {
    padding: 10px 15px;
    border-bottom: 1px solid #f1f1f1;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .coupon-item:last-child {
    border-bottom: none;
  }
  
  .coupon-item:hover {
    background-color: #f8f9fa;
  }
  
  .coupon-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
  }
  
  .coupon-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex: 1;
  }
  
  .coupon-selection {
    display: flex;
    align-items: center;
    margin-left: 15px;
  }
  
  .coupon-selection input[type="radio"] {
    margin-right: 5px;
    cursor: pointer;
  }
  
  .select-label {
    font-size: 12px;
    color: #3BB77E;
    cursor: pointer;
    font-weight: 500;
    padding: 2px 8px;
    border: 1px solid #3BB77E;
    border-radius: 3px;
    transition: all 0.2s ease;
  }
  
  .select-label:hover {
    background-color: #3BB77E;
    color: white;
  }
  
  .coupon-item.selected {
    background-color: rgba(59, 183, 126, 0.1);
    border-left: 3px solid #3BB77E;
  }
  
  .coupon-item.selected .select-label {
    background-color: #3BB77E;
    color: white;
  }
  
  .coupon-code {
    font-weight: 600;
    color: #3BB77E;
    font-size: 14px;
  }
  
  .coupon-discount {
    font-weight: 600;
    color: #dc3545;
    font-size: 12px;
    background-color: #fff3cd;
    padding: 2px 6px;
    border-radius: 4px;
  }
  
  .coupon-description {
    font-size: 12px;
    color: #6c757d;
    margin-bottom: 3px;
  }
  
  .coupon-terms {
    font-size: 11px;
    color: #999;
    font-style: italic;
  }

  .coupon-invalid {
    color: #dc3545;
    font-size: 12px;
    margin-top: 5px;
    display: none;
  }
  
  .coupon-valid {
    color: #3BB77E;
    font-size: 12px;
    margin-top: 5px;
    display: none;
  }
  
  .coupon-success-message {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #d4edda;
    border: 1px solid #c3e6cb;
    border-radius: 4px;
    padding: 8px 12px;
  }
  
  .coupon-success-message span {
    color: #155724;
    font-weight: 500;
  }
  
  .remove-coupon-btn {
    background: none;
    border: none;
    color: #dc3545;
    font-size: 12px;
    padding: 4px 8px;
    cursor: pointer;
    margin-left: 10px;
    text-decoration: underline;
    border-radius: 3px;
    transition: background-color 0.2s ease;
  }

  .remove-coupon-btn:hover {
    color: #c82333;
    background-color: rgba(220, 53, 69, 0.1);
  }

  .coupon-summary-row {
    color: #3BB77E;
    font-weight: 500;
  }

  .coupon-item.selected .select-label {
    background-color: #3BB77E;
    color: white;
  }
  
  .coupon-actions {
    display: flex;
    gap: 10px;
    margin-top: 10px;
    padding: 10px;
    background-color: #f8f9fa;
    border-radius: 4px;
    border: 1px solid #dee2e6;
  }
  
  .apply-selected-btn {
    flex: 1;
    padding: 8px 15px;
    background-color: #3BB77E;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s ease;
  }
  
  .apply-selected-btn:hover {
    background-color: #2f9b6a;
  }
  
  .apply-selected-btn:disabled {
    background-color: #6c757d;
    cursor: not-allowed;
  }
  
  .clear-selection-btn {
    padding: 8px 15px;
    background-color: #6c757d;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s ease;
  }
  
  .clear-selection-btn:hover {
    background-color: #5a6268;
  }

</style>

<header class="header-area header-style-1 header-height-2">
    <div class="header-top header-top-ptb-1 d-none d-lg-block">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-xl-3 col-lg-4">
                    <div class="header-info">
                        <ul>
                            <li><i class="fi-rs-smartphone"></i> <a href="#">(+01) - 2345 - 6789</a></li>
                            <!-- <li><i class="fi-rs-marker"></i><a href="/contact">Our location</a></li> -->
                        </ul>
                    </div>
                </div>
                <div class="col-xl-6 col-lg-4">
                    <div class="text-center">
                    </div>
                </div>
                <div class="col-xl-3 col-lg-4">
                    <div class="header-info header-info-right">
                        <ul>
                            <li>
                                <a class="language-dropdown-active" href="#"> 
                                    <i class="fi-rs-world"></i> English <i class="fi-rs-angle-small-down"></i>
                                </a>
                                <ul class="language-dropdown">
                                    <li><a href="#"><img src="asset/imgs/theme/flag-fr.png" alt="">Français</a></li>
                                    <li><a href="#"><img src="asset/imgs/theme/flag-dt.png" alt="">Deutsch</a></li>
                                    <li><a href="#"><img src="asset/imgs/theme/flag-ru.png" alt="">Pусский</a></li>
                                </ul>
                            </li>
                            <% if (typeof user !== 'undefined' && user) { %>
                                <div class="dropdown">
                                    <a href="#" class="sign-in-link"><%= user.name %></a>
                                    <div class="dropdown-content">
                                        <a href="/profileinfo">Profile</a>
                                        <a href="/logout">Logout</a>
                                    </div>
                                </div>
                            <% } else { %>
                                <li><i class="fi-rs-user"></i><a href="/signup">Log in/Sign Up</a></li>
                            <% } %>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="header-middle header-middle-ptb-1 d-none d-lg-block">
        <div class="container">
            <div class="header-wrap">
                <div class="logo logo-width-1">
                   <img src="/assets/imgs/theme/shoestore-logo.svg" alt="logo">
                </div>
                <div class="header-right">
                    <div class="search-style-2">
                        <!-- <form action="/search" method="get">
                            <input type="text" placeholder="Search for items..." name="query">
                        </form> -->
                    </div>
                    <div class="header-action-right">
                        <div class="header-action-2">
                            <div class="header-action-icon-2">
                                <a href="/wishlist">
                                    <img class="svgInject" alt="Evara" src="assets/imgs/theme/icons/icon-heart.svg">
                                    <!-- <span class="pro-count blue">0</span> -->
                                </a>
                            </div>
                            <div class="header-action-icon-2">
                                <a class="mini-cart-icon" href="/cart">
                                    <img alt="Evara" src="assets/imgs/theme/icons/icon-cart.svg">
                                    <!-- <span class="pro-count blue">3</span> -->
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="header-bottom header-bottom-bg-color sticky-bar">
        <div class="container">
            <div class="header-wrap header-space-between position-relative">
                <div class="logo logo-width-1 d-block d-lg-none">
                    <a href="/"><img src="/assets/imgs/theme/shoestore-logo.svg" alt="logo"></a>
                </div>
                <div class="header-nav d-none d-lg-flex">
                    <div class="main-menu main-menu-padding-1 main-menu-lh-2 d-none d-lg-block">
                        <nav>
                            <ul>
                                <li><a href="/">Home</a></li>
                                <li><a href="/shop">Shop</a></li>
                            </ul>
                        </nav>
                    </div>
                </div>
                <div class="hotline d-none d-lg-block">
                    <p><i class="fi-rs-headset"></i><span>Hotline</span> 1900 - 888 </p>
                </div>   
                <div class="header-action-icon-2 d-block d-lg-none">
                    <div class="burger-icon burger-icon-white">
                        <span class="burger-icon-top"><span></span><span></span><span></span></span>
                        <span class="burger-icon-mid"><span></span><span></span><span></span></span>
                        <span class="burger-icon-bottom"><span></span><span></span><span></span></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</header>

<div class="mobile-header-active mobile-header-wrapper-style perfect-scrollbar">
    <div class="mobile-header-wrapper-inner">
        <div class="mobile-header-content-area">
            <div class="perfect-scroll">
                <div class="mobile-menu-wrap mobile-header-border">
                    <nav>
                        <ul class="mobile-menu font-heading">
                            <li><a class="active" href="/">Home</a></li>
                            <li><a href="/shop">Shop</a></li>
                        </ul>
                    </nav>
                </div>
                <div class="mobile-account">
                    <h6 class="mb-10px">My Account</h6>
                    <ul class="mobile-menu font-heading">
                        <li><a href="/profileinfo">Profile</a></li>
                        <li><a href="/myorders">My Orders</a></li>
                        <li><a href="/addresses">My Addresses</a></li>
                        <li><a href="/wishlist">Wishlist</a></li>
                        <li><a href="/wallet">My Wallet</a></li>
                        <li><a href="/logout">Logout</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<main class="main">
    <div class="page-header breadcrumb-wrap">
        <div class="container">
            <div class="breadcrumb">
                <a href="/" rel="nofollow">Home</a>
                <span></span> <a href="/cart">Cart</a>
                <span></span> Checkout
            </div>
        </div>
    </div>

    <section class="mt-50 mb-50">
    <div class="container">
        <form class="form" id="checkoutForm" action="/checkout" method="post">
            <div class="row">
              <div class="col-lg-8">
                <!-- Shipping Address Section -->
                <div class="checkout-section">
                  <div class="card">
                    <div class="card-header"><h4>Shipping Address</h4></div>
                    <div class="card-body address-list">
                      <% addresses.forEach(addr => { %>
                      <label class="address-card <%= addr.isDefault ? 'selected' : '' %>">
                        <input
                          type="radio"
                          name="selectedAddress"
                          value="<%= addr._id %>"
                          hidden
                          <%= addr.isDefault ? 'checked' : '' %>
                          required
                        />
                        <div class="address-name">
                          <%= addr.name %>
                          <% if (addr.isDefault) { %>
                            <span class="default-badge">Default</span>
                          <% } %>
                        </div>
                        <div class="address-details">
                          <%= addr.addressLine1 %><br />
                          <% if (addr.addressLine2) { %>
                            <%= addr.addressLine2 %><br />
                          <% } %>
                          <%= addr.city %>, <%= addr.state %> <%= addr.pincode %><br />
                          Phone: <%= addr.phone %><% if (addr.altPhone) { %> / <%= addr.altPhone %><% } %>
                        </div>
                      </label>
                      <% }) %>
                      <div class="add-address-btn">
                        <a href="/addAddresses?redirect=checkout"><i class="fi-rs-plus"></i> Add New Address</a>
                      </div>
                    </div>
                  </div>
                </div>
          
                <!-- Order Items Section -->
                <div class="checkout-section">
                  <div class="card">
                    <div class="card-header"><h4>Order Items</h4></div>
                    <div class="card-body checkout-products">
                      <% items.forEach(item => { %>
                      <div class="checkout-product">
                        <img
                           src="<%= item.productImage %>" alt="<%= item.product?.productName || 'Product' %>"
                           class="checkout-product-image"
                        />
                        <div class="checkout-product-details">
                          <div class="checkout-product-name"><%= item.name %></div>
                          <div class="checkout-product-price">₹<%= item.price %></div>
                        </div>
                        <div class="checkout-product-quantity">Qty: <%= item.quantity %></div>
                        <div class="checkout-product-total">₹<%= (item.price * item.quantity).toFixed(2) %></div>
                      </div>
                      <% }) %>
                    </div>
                  </div>
                </div> 
                
                
          
               <!-- Payment Methods Section -->
                <div class="checkout-section">
                    <div class="card">
                        <div class="card-header">
                            <h4>Payment Method</h4>
                        </div>
                        <div class="card-body">
                            <div class="payment-methods">
                                <!-- Razorpay -->
                                <div class="payment-method">
                                    <div class="payment-method-icon">
                                        <i class="fi-rs-credit-card" style="font-size: 24px; color: #3BB77E;"></i>
                                    </div>
                                    <div class="payment-method-details">
                                        <div class="payment-method-name">Razorpay</div>
                                        <div class="payment-method-description">Pay securely with Razorpay</div>
                                    </div>
                                    <div class="payment-method-radio">
                                        <input type="radio" name="paymentMethod" value="razorpay" required>
                                    </div>
                                </div>
                                
                                <!-- Wallet -->
                                <div class="payment-method">
                                    <div class="payment-method-icon">
                                        <i class="fi-rs-wallet" style="font-size: 24px; color: #3BB77E;"></i>
                                    </div>
                                    <div class="payment-method-details">
                                        <div class="payment-method-name">Wallet</div>
                                        <div class="payment-method-description">
                                            Pay using Wallet
                                            <div class="wallet-balance" style="font-size: 12px; color: #666; margin-top: 2px;">
                                                Balance: ₹<span id="walletBalance">Loading...</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="payment-method-radio">
                                        <input type="radio" name="paymentMethod" value="wallet" required>
                                    </div>
                                </div>
                                
                                <!-- Cash on Delivery -->
                                <div class="payment-method selected">
                                    <div class="payment-method-icon">
                                      <i class="fi-rs-money" style="font-size: 24px; color: #3BB77E;"></i>
                                    </div>
                                    <div class="payment-method-details">
                                      <div class="payment-method-name">Cash on Delivery</div>
                                      <div class="payment-method-description">Pay with cash upon delivery</div>
                                    </div>
                                    <div class="payment-method-radio">
                                      <input type="radio" name="paymentMethod" value="cod" checked required />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
              </div>
          
              <!-- Order Summary -->
              <div class="col-lg-4">
                <% const subtotal = items.reduce((sum, i) => sum + i.price * i.quantity, 0); %>
                <% const shipping = 41; %>
                <% const tax = subtotal * 0.05; %>
                <% const totalAmount = (subtotal + shipping + tax).toFixed(2); %>
          
                <div class="card">
                  <div class="card-body checkout-summary">
                    <!--Coupon area-->
                    <div class="coupon-section">
                      <div class="coupon-input">
                        <input type="text" id="couponCode" placeholder="Enter coupon code or click to select" />
                        <button type="button" id="applyCouponBtn">Apply</button>
                        <button type="button" id="selectCouponBtn" class="select-coupon-btn">Select Coupon</button>
                     </div>
                      <div class="coupon-dropdown" id="couponDropdown">
                        <!-- Available coupons will be loaded here -->
                      </div>
                      <div class="coupon-actions" id="couponActions" style="display: none;">
                        <!-- <button type="button" id="applySelectedCouponBtn" class="apply-selected-btn">Apply Selected Coupon</button> -->
                        <button type="button" id="clearSelectionBtn" class="clear-selection-btn">Clear Selection</button>
                      </div>
                      <div class="coupon-invalid" id="couponInvalid"></div>
                      <div class="coupon-valid" id="couponValid">
                        <!-- Remove coupon button will be added here dynamically -->
                      </div>
                    </div>

                    <div class="checkout-summary-title">Order Summary</div>
                    <div class="checkout-summary-row">
                      <span>Subtotal</span>
                      <span id="orderSubtotal">₹<%= subtotal.toFixed(2) %></span>
                    </div>
                    <div class="checkout-summary-row">
                      <span>Shipping</span>
                      <span>₹<%= shipping.toFixed(2) %></span>
                    </div>
                    <div class="checkout-summary-row">
                      <span>Tax (5%)</span>
                      <span>₹<%= tax.toFixed(2) %></span>
                    </div>
                    <div class="checkout-summary-row coupon-summary-row" id="couponDiscountRow" style="display: none;">
                      <!--Coupon discount-->
                    <span>Coupon Discount</span>
                    <span id="couponDiscountAmount">-₹0.00</span>
                    </div>
                    <div class="checkout-summary-row">
                      <strong>Total</strong>
                     <strong class="total-amount">₹<%= totalAmount %></strong>
                    </div>
                    <button type="submit" class="btn place-order-btn mt-4" id="placeOrderBtn">Place Order</button>
                  </div>
                </div>
              </div>


            </div>
          
            <input type="hidden" id="totalAmount" name="totalAmount" value="<%= totalAmount %>" />
        </form>
    </div>
    </section>
</main>

<!-- Razorpay Checkout Script -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
document.addEventListener("DOMContentLoaded", () => {
  console.log('DOM Content Loaded');
  
  // Test if all required elements exist
  const applyBtn = document.getElementById('applyCouponBtn');
  const selectBtn = document.getElementById('selectCouponBtn');
  const couponCode = document.getElementById('couponCode');
  const couponDropdown = document.getElementById('couponDropdown');
  
  console.log('Apply button:', applyBtn);
  console.log('Select button:', selectBtn);
  console.log('Coupon code input:', couponCode);
  console.log('Coupon dropdown:', couponDropdown);
  
  let walletBalance = 0;
  
  // Load wallet balance
  async function loadWalletBalance() {
    try {
      const response = await fetch('/wallet-balance');
      const data = await response.json();
      if (data.success) {
        walletBalance = data.balance;
        document.getElementById('walletBalance').textContent = walletBalance.toFixed(2);
        
        // Update wallet payment method visibility based on balance
        const totalAmount = parseFloat(document.getElementById('totalAmount').value);
        const walletMethod = document.querySelector('input[value="wallet"]').closest('.payment-method');
        const walletBalanceElement = document.getElementById('walletBalance');
        
        if (walletBalance < totalAmount) {
          walletBalanceElement.style.color = '#dc3545';
          walletMethod.style.opacity = '0.6';
          walletMethod.title = 'Insufficient wallet balance';
        } else {
          walletBalanceElement.style.color = '#28a745';
          walletMethod.style.opacity = '1';
          walletMethod.title = '';
        }
      }
    } catch (error) {
      console.error('Error loading wallet balance:', error);
      document.getElementById('walletBalance').textContent = '0.00';
    }
  }

  // Load wallet balance on page load
  loadWalletBalance();

  // Test backend routes
  async function testBackendRoutes() {
    console.log('Testing backend routes...');
    
    try {
      // Test available coupons route
      const couponsResponse = await fetch('/available-coupons');
      console.log('Available coupons response status:', couponsResponse.status);
      const couponsData = await couponsResponse.json();
      console.log('Available coupons data:', couponsData);
      
      // Test apply coupon route with a dummy request
      const applyResponse = await fetch('/apply-coupon', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ couponCode: 'TEST123', subtotal: 1000 })
      });
      console.log('Apply coupon response status:', applyResponse.status);
      const applyData = await applyResponse.json();
      console.log('Apply coupon data:', applyData);
      
    } catch (error) {
      console.error('Error testing backend routes:', error);
    }
  }

  // Test backend routes on page load
  testBackendRoutes();

  // Temporary function to create test coupons (remove this in production)
  async function createTestCoupons() {
    console.log('Creating test coupons...');
    try {
      const testCoupons = [
        {
          name: 'WELCOME10',
          code: 'WELCOME10',
          description: 'Get 10% off on your first order',
          startDate: new Date(),
          expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
          minPrice: 500,
          offerPrice: 100,
          usageType: 'multi-use',
          status: 'Active'
        },
        {
          name: 'SAVE50',
          code: 'SAVE50',
          description: 'Save ₹50 on orders above ₹1000',
          startDate: new Date(),
          expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
          minPrice: 1000,
          offerPrice: 50,
          usageType: 'multi-use',
          status: 'Active'
        }
      ];

      for (const coupon of testCoupons) {
        const response = await fetch('/admin/coupons', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(coupon)
        });
        console.log(`Created coupon ${coupon.code}:`, response.status);
      }
    } catch (error) {
      console.error('Error creating test coupons:', error);
    }
  }

  // Uncomment the line below to create test coupons (remove in production)
  // createTestCoupons();

  // Coupon functionality
let appliedCoupon = null;
let couponDiscount = 0;

// Load available coupons
async function loadAvailableCoupons() {
  console.log('Loading available coupons...');
  try {
    const response = await fetch('/available-coupons');
    const data = await response.json();
    console.log('Coupons response:', data);
    if (data.success) {
      console.log('Coupons loaded:', data.coupons);
      displayCoupons(data.coupons);
    } else {
      console.log('Failed to load coupons:', data.message);
    }
  } catch (error) {
    console.error('Error loading coupons:', error);
  }
}

function displayCoupons(coupons) {
  console.log('Displaying coupons:', coupons);
  const dropdown = document.getElementById('couponDropdown');
  console.log('Dropdown element:', dropdown);
  dropdown.innerHTML = '';
  
  if (coupons.length === 0) {
    console.log('No coupons available');
    dropdown.innerHTML = '<div class="coupon-item">No coupons available</div>';
    return;
  }
  
  coupons.forEach(coupon => {
    console.log('Creating coupon item for:', coupon);
    const couponItem = document.createElement('div');
    couponItem.className = 'coupon-item';
    couponItem.innerHTML = `
      <div class="coupon-header">
        <div class="coupon-info">
          <span class="coupon-code">${coupon.code}</span>
          <span class="coupon-discount">₹${coupon.offerPrice} OFF</span>
        </div>
        <div class="coupon-selection">
          <input type="radio" name="selectedCoupon" value="${coupon.code}" id="coupon_${coupon.code}">
          <label for="coupon_${coupon.code}" class="select-label">Select</label>
        </div>
      </div>
      <div class="coupon-description">${coupon.description}</div>
      <div class="coupon-terms">Min. order: ₹${coupon.minPrice}</div>
    `;
    
    // Add click event to the radio button
    const radioButton = couponItem.querySelector(`input[value="${coupon.code}"]`);
    radioButton.addEventListener('change', () => {
      console.log('Coupon selected:', coupon.code);
      document.getElementById('couponCode').value = coupon.code;
      
      // Update visual selection
      document.querySelectorAll('.coupon-item').forEach(item => {
        item.classList.remove('selected');
      });
      couponItem.classList.add('selected');
      
      // Show action buttons
      document.getElementById('couponActions').style.display = 'flex';
    });
    
    // Add click event to the entire coupon item for better UX
    couponItem.addEventListener('click', (e) => {
      // Don't trigger if clicking on the radio button itself
      if (e.target.type === 'radio' || e.target.tagName === 'LABEL') {
        return;
      }
      
      // Uncheck all other radio buttons
      document.querySelectorAll('input[name="selectedCoupon"]').forEach(radio => {
        radio.checked = false;
      });
      
      // Check this radio button
      radioButton.checked = true;
      
      console.log('Coupon selected:', coupon.code);
      document.getElementById('couponCode').value = coupon.code;
      
      // Update visual selection
      document.querySelectorAll('.coupon-item').forEach(item => {
        item.classList.remove('selected');
      });
      couponItem.classList.add('selected');
      
      // Show action buttons
      document.getElementById('couponActions').style.display = 'flex';
    });
    
    dropdown.appendChild(couponItem);
  });
  console.log('Coupons displayed in dropdown');
}

// Apply coupon
async function applyCoupon() {
  console.log('Applying coupon...');
  const couponCode = document.getElementById('couponCode').value.trim();
  console.log('Coupon code:', couponCode);
  
  if (!couponCode) {
    console.log('No coupon code entered');
    return;
  }

  try {
    // Get subtotal from the order summary using the specific ID
    const subtotalElement = document.getElementById('orderSubtotal');
    if (!subtotalElement) {
      console.error('Could not find subtotal element');
      alert('Error: Could not find order subtotal. Please refresh the page and try again.');
      return;
    }
    
    const subtotalText = subtotalElement.textContent;
    console.log('Subtotal text:', subtotalText);
    
    // Extract the number from the text (remove ₹ symbol)
    const subtotal = parseFloat(subtotalText.replace('₹', ''));
    console.log('Subtotal:', subtotal);
    
    if (isNaN(subtotal)) {
      console.error('Invalid subtotal value:', subtotalText);
      alert('Error: Invalid order subtotal. Please refresh the page and try again.');
      return;
    }
    
    const response = await fetch('/apply-coupon', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ couponCode, subtotal })
    });

    const data = await response.json();
    console.log('Response:', data);
    
    if (data.success) {
      appliedCoupon = data.coupon;
      couponDiscount = data.discount;
      
      document.getElementById('couponValid').innerHTML = `
        <div class="coupon-success-message">
          <span>Coupon applied! You saved ₹${couponDiscount.toFixed(2)}</span>
          <button type="button" class="remove-coupon-btn" onclick="window.removeCouponDiscount()">Remove</button>
        </div>
      `;
      document.getElementById('couponValid').style.display = 'block';
      document.getElementById('couponInvalid').style.display = 'none';
      
      updateOrderSummary();
    } else {
      document.getElementById('couponInvalid').textContent = data.message;
      document.getElementById('couponInvalid').style.display = 'block';
      document.getElementById('couponValid').style.display = 'none';
    }
  } catch (error) {
    console.error('Error applying coupon:', error);
    alert('Error applying coupon. Please try again.');
  }
}

function updateOrderSummary() {
  console.log('Updating order summary...');
  console.log('Coupon discount:', couponDiscount);
  
  const discountRow = document.getElementById('couponDiscountRow');
  const discountAmount = document.getElementById('couponDiscountAmount');
  const totalRow = document.querySelector('.total-amount');
  const totalAmountInput = document.getElementById('totalAmount');
  
  if (couponDiscount > 0) {
    console.log('Applying coupon discount...');
    discountRow.style.display = 'flex';
    discountAmount.textContent = `-₹${couponDiscount.toFixed(2)}`;
    
    // Get the original total (subtotal + shipping + tax)
    const subtotalElement = document.getElementById('orderSubtotal');
    if (!subtotalElement) {
      console.error('Could not find subtotal element in updateOrderSummary');
      return;
    }
    
    const subtotal = parseFloat(subtotalElement.textContent.replace('₹', ''));
    const shipping = 41;
    const tax = subtotal * 0.05;
    const originalTotal = subtotal + shipping + tax;
    
    // Calculate new total with discount
    const newTotal = Number((originalTotal - couponDiscount).toFixed(2));
    
    console.log('Subtotal:', subtotal, 'Shipping:', shipping, 'Tax:', tax);
    console.log('Original total:', originalTotal, 'New total:', newTotal);
    
    // Update the displayed total
    document.querySelector('.total-amount').innerHTML = `₹${newTotal}`;
    
    // Update the hidden totalAmount input field for payment processing
    totalAmountInput.value = newTotal.toFixed(2);
    
    // Re-check COD eligibility and wallet balance with new total
    checkCODEligibility();
    updateWalletPaymentMethod(newTotal);
  } else {
    console.log('No coupon discount to apply');
    // If no coupon discount, hide the discount row
    discountRow.style.display = 'none';
  }
}

// Function to remove coupon discount
function removeCouponDiscount() {
  console.log('Removing coupon discount...');
  const discountRow = document.getElementById('couponDiscountRow');
  const totalAmountInput = document.getElementById('totalAmount');
  
  // Get the original total (subtotal + shipping + tax)
  const subtotalElement = document.getElementById('orderSubtotal');
  if (!subtotalElement) {
    console.error('Could not find subtotal element in removeCouponDiscount');
    return;
  }
  
  const subtotal = parseFloat(subtotalElement.textContent.replace('₹', ''));
  const shipping = 41;
  const tax = subtotal * 0.05;
  const originalTotal = subtotal + shipping + tax;
  
  console.log('Original total:', originalTotal);
  
  // Update the displayed total
  document.querySelector('.total-amount').innerHTML = `₹${originalTotal.toFixed(2)}`;
  
  // Update the hidden totalAmount input field
  totalAmountInput.value = originalTotal.toFixed(2);
  
  // Hide discount row
  discountRow.style.display = 'none';
  
  // Re-check COD eligibility and wallet balance
  checkCODEligibility();
  updateWalletPaymentMethod(originalTotal);
  
  // Clear coupon fields
  document.getElementById('couponCode').value = '';
  document.getElementById('couponValid').style.display = 'none';
  document.getElementById('couponInvalid').style.display = 'none';
  
  // Clear selection state
  document.querySelectorAll('input[name="selectedCoupon"]').forEach(radio => {
    radio.checked = false;
  });
  
  document.querySelectorAll('.coupon-item').forEach(item => {
    item.classList.remove('selected');
  });
  
  document.getElementById('couponActions').style.display = 'none';
  
  // Reset coupon variables
  appliedCoupon = null;
  couponDiscount = 0;
  
  console.log('Coupon discount removed successfully');
}

// Make removeCouponDiscount globally accessible
window.removeCouponDiscount = removeCouponDiscount;

// Add a function to update wallet payment method visibility
function updateWalletPaymentMethod(newTotal) {
  const walletMethod = document.querySelector('input[value="wallet"]').closest('.payment-method');
  const walletBalanceElement = document.getElementById('walletBalance');
  
  if (walletBalance < newTotal) {
    walletBalanceElement.style.color = '#dc3545';
    walletMethod.style.opacity = '0.6';
    walletMethod.title = 'Insufficient wallet balance';
  } else {
    walletBalanceElement.style.color = '#28a745';
    walletMethod.style.opacity = '1';
    walletMethod.title = '';
  }
}

// Event listeners for coupon functionality
document.getElementById('applyCouponBtn').addEventListener('click', applyCoupon);
document.getElementById('selectCouponBtn').addEventListener('click', () => {
  console.log('Select coupon button clicked');
  const dropdown = document.getElementById('couponDropdown');
  console.log('Dropdown element:', dropdown);
  dropdown.classList.toggle('active');
  console.log('Dropdown active:', dropdown.classList.contains('active'));
  if (dropdown.classList.contains('active')) {
    document.getElementById('couponCode').focus();
  }
});
document.getElementById('couponCode').addEventListener('focus', () => {
  document.getElementById('couponDropdown').classList.add('active');
});
document.getElementById('couponCode').addEventListener('blur', (e) => {
  setTimeout(() => {
    document.getElementById('couponDropdown').classList.remove('active');
  }, 200);
});

// Close dropdown when clicking outside
document.addEventListener('click', (e) => {
  const dropdown = document.getElementById('couponDropdown');
  const couponSection = document.querySelector('.coupon-section');
  
  if (!couponSection.contains(e.target) && dropdown.classList.contains('active')) {
    dropdown.classList.remove('active');
  }
});

// Load coupons on page load
loadAvailableCoupons();

  // Address card selection
  const addressCards = document.querySelectorAll('.address-card');
  addressCards.forEach(card => {
    card.addEventListener('click', () => {
      addressCards.forEach(c => {
        c.classList.remove('selected');
        c.querySelector('input[type="radio"]').checked = false;
      });
      card.classList.add('selected');
      card.querySelector('input[type="radio"]').checked = true;
    });
  });

  // Payment method selection
  const paymentMethods = document.querySelectorAll('.payment-method');
  paymentMethods.forEach(method => {
    method.addEventListener('click', () => {
      const paymentValue = method.querySelector('input[type="radio"]').value;
      
      // Check wallet balance for wallet payment
      if (paymentValue === 'wallet') {
        const totalAmount = parseFloat(document.getElementById('totalAmount').value);
        if (walletBalance < totalAmount) {
          // Redirect to order failure page instead of showing alert
          window.location.href = '/order-failure';
          return;
        }
      }
      
      paymentMethods.forEach(m => {
        m.classList.remove('selected');
        m.querySelector('input[type="radio"]').checked = false;
      });
      method.classList.add('selected');
      method.querySelector('input[type="radio"]').checked = true;
    });
  });

  // Handle form submission
  document.getElementById('checkoutForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const paymentMethodElement = document.querySelector('input[name="paymentMethod"]:checked');
    const selectedAddressElement = document.querySelector('input[name="selectedAddress"]:checked');
    
    if (!paymentMethodElement) {
      // Redirect to order failure page instead of showing alert
      window.location.href = '/order-failure';
      return;
    }
    
    if (!selectedAddressElement) {
      // Redirect to order failure page instead of showing alert
      window.location.href = '/order-failure';
      return;
    }

    const paymentMethod = paymentMethodElement.value;
    const selectedAddress = selectedAddressElement.value;

    // Additional wallet balance check before processing
    if (paymentMethod === 'wallet') {
      const totalAmount = parseFloat(document.getElementById('totalAmount').value);
      if (walletBalance < totalAmount) {
        // Redirect to order failure page instead of showing alert
        window.location.href = '/order-failure';
        return;
      }
    }

    if (paymentMethod === 'razorpay') {
      // Additional validation for Razorpay payment
      const totalAmount = parseFloat(document.getElementById('totalAmount').value);
      if (isNaN(totalAmount) || totalAmount <= 0) {
        console.error('Invalid total amount for payment');
        window.location.href = '/order-failure';
        return;
      }

      // Check if cart has items
      const cartItems = document.querySelectorAll('.checkout-product');
      if (cartItems.length === 0) {
        console.error('No items in cart for payment');
        window.location.href = '/order-failure';
        return;
      }

      await initiateRazorpayPayment(selectedAddress);
    } else {
      await processOrder(paymentMethod, selectedAddress);
    }
  });

  // Razorpay Payment Function
  async function initiateRazorpayPayment(selectedAddress) {
    try {
      // Validate required data before creating order
      if (!selectedAddress) {
        console.error('No address selected for Razorpay payment');
        window.location.href = '/order-failure';
        return;
      }

      const totalAmount = parseFloat(document.getElementById('totalAmount').value);
      if (isNaN(totalAmount) || totalAmount <= 0) {
        console.error('Invalid total amount for Razorpay payment');
        window.location.href = '/order-failure';
        return;
      }

      // Create Razorpay order with coupon discount
      const orderResponse = await fetch('/create-razorpay-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          couponDiscount: couponDiscount,
          appliedCoupon: appliedCoupon ? appliedCoupon._id : null
        })
      });

      if (!orderResponse.ok) {
        console.error('Network error creating Razorpay order');
        window.location.href = '/order-failure';
        return;
      }

      const orderData = await orderResponse.json();
      
      if (!orderData.success) {
        console.error('Failed to create Razorpay order:', orderData.message);
        // Redirect to order failure page instead of showing alert
        window.location.href = '/order-failure';
        return;
      }

      // Validate order data
      if (!orderData.key || !orderData.orderId || !orderData.amount) {
        console.error('Invalid Razorpay order data received');
        window.location.href = '/order-failure';
        return;
      }

      // Check if Razorpay script is loaded
      if (typeof Razorpay === 'undefined') {
        console.error('Razorpay script not loaded');
        window.location.href = '/order-failure';
        return;
      }

      // Razorpay options
      const options = {
        key: orderData.key,
        amount: orderData.amount,
        currency: orderData.currency,
        name: "Shoestore",
        description: "Order Payment",
        order_id: orderData.orderId,
        handler: async function(response) {
          try {
            // Payment successful
            await processOrder('razorpay', selectedAddress, {
              razorpay_payment_id: response.razorpay_payment_id,
              razorpay_order_id: response.razorpay_order_id,
              razorpay_signature: response.razorpay_signature
            });
          } catch (error) {
            console.error('Error processing successful payment:', error);
            window.location.href = '/order-failure';
          }
        },
        prefill: {
        
  name: "<%= (user && user.name) ? user.name : '' %>",
  email: "<%= (user && user.email) ? user.email : '' %>",
  contact: "<%= (user && user.phone) ? user.phone : '' %>"
        },
        theme: {
          color: "#3BB77E"
        },
        modal: {
          ondismiss: function() {
            console.log('Payment modal closed');
            // Redirect to order failure page when user dismisses the payment modal
            window.location.href = '/order-failure';
          }
        }
      };

      const rzp = new Razorpay(options);
      
      // Add error handling for Razorpay instance
      rzp.on('payment.failed', function (response) {
        console.error('Razorpay payment failed:', response.error);
        window.location.href = '/order-failure';
      });

      rzp.open();

    } catch (error) {
      console.error('Error initiating Razorpay payment:', error);
      // Redirect to order failure page on error instead of showing alert
      window.location.href = '/order-failure';
    }
  }

  // Process Order Function
  async function processOrder(paymentMethod, selectedAddress, paymentData = {}) {
    try {
      // const formData = {
      //   paymentMethod,
      //   selectedAddress,
      //   ...paymentData
      // };

const formData = {
  paymentMethod,
  selectedAddress,
  appliedCoupon: appliedCoupon ? appliedCoupon._id : null,
  couponDiscount: couponDiscount,
  totalAmount: document.getElementById('totalAmount').value, // Ensure updated total is sent
  ...paymentData
};

      // Show loading state
      const placeOrderBtn = document.getElementById('placeOrderBtn');
      const originalText = placeOrderBtn.textContent;
      placeOrderBtn.textContent = 'Processing...';
      placeOrderBtn.disabled = true;

      const response = await fetch('/checkout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      const data = await response.json();

      if (data.success) {
        window.location.href = '/order-success';
      } else {
        // Handle payment failure for all payment methods
        console.log('Payment failed:', data.message);
        // Redirect to order failure page for payment failures
        if (data.orderId) {
          window.location.href = `/order-failure/${data.orderId}`;
        } else {
          window.location.href = '/order-failure';
        }
      }
      
      // Restore button state
      placeOrderBtn.textContent = originalText;
      placeOrderBtn.disabled = false;
      
    } catch (error) {
      console.error('Error processing order:', error);
      
      // Handle network errors or other issues for all payment methods
      window.location.href = '/order-failure';
      
      // Restore button state
      const placeOrderBtn = document.getElementById('placeOrderBtn');
      placeOrderBtn.textContent = 'Place Order';
      placeOrderBtn.disabled = false;
    }
  }

  function checkCODEligibility() {
    const totalAmount = parseFloat(document.getElementById('totalAmount').value);
    const codMethod = document.querySelector('input[value="cod"]').closest('.payment-method');
    const codDescription = codMethod.querySelector('.payment-method-description');
    
    if (totalAmount > 1000) {
      codMethod.style.opacity = '0.6';
      codMethod.style.pointerEvents = 'none';
      codDescription.textContent = 'COD not available for orders above ₹1000';
      codDescription.style.color = '#dc3545';
      
      // If COD is currently selected, deselect it
      const codRadio = codMethod.querySelector('input[type="radio"]');
      if (codRadio.checked) {
        codRadio.checked = false;
        codMethod.classList.remove('selected');
      }
    } else {
      codMethod.style.opacity = '1';
      codMethod.style.pointerEvents = 'auto';
      codDescription.textContent = 'Pay with cash upon delivery';
      codDescription.style.color = '';
    }
  }
  checkCODEligibility()
});

// Apply selected coupon button
document.getElementById('applySelectedCouponBtn').addEventListener('click', () => {
  const selectedCoupon = document.querySelector('input[name="selectedCoupon"]:checked');
  if (selectedCoupon) {
    document.getElementById('couponCode').value = selectedCoupon.value;
    applyCoupon();
    // Hide dropdown and action buttons after applying
    document.getElementById('couponDropdown').classList.remove('active');
    document.getElementById('couponActions').style.display = 'none';
  } else {
    alert('Please select a coupon first');
  }
});

// Clear selection button
document.getElementById('clearSelectionBtn').addEventListener('click', () => {
  // Uncheck all radio buttons
  document.querySelectorAll('input[name="selectedCoupon"]').forEach(radio => {
    radio.checked = false;
  });
  
  // Remove visual selection
  document.querySelectorAll('.coupon-item').forEach(item => {
    item.classList.remove('selected');
  });
  
  // Clear coupon code input
  document.getElementById('couponCode').value = '';
  
  // Hide action buttons
  document.getElementById('couponActions').style.display = 'none';
  
  console.log('Selection cleared');
});
</script> 
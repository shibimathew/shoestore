<%- include('../partials/user/header.ejs') %>

<!-- Add Material Icons font -->
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<style>
    .breadcrumb a,
    .breadcrumb span {
        display: inline-block;
        margin-right: 5px;
    }

    .breadcrumb .separator {
        margin: 0 8px;
        color: #999;
    }

    .card-body {
        padding: 1.25rem;
    }

    .card-header {
        padding: 1rem 1.25rem;
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .card-header h4 {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .dropdown{
        position:relative;
        display:inline-block;
    }
    .dropdown-content{
        display: none;
        position: absolute;
        background-color: white;
        min-width: 160px;
        box-shadow: 0px 8px 16px 0px rgb(0,0,0,0,2);
        z-index: 1000;
        right: 0;
    }
    .dropdown-content a {
        color: black;
        padding: 12px 16px;
        text-decoration: none;
        display: block;
        width: 100%;
    }
    .dropdown-content a:hover{
        background-color: #f1f1f1;
    }
    .dropdown:hover .dropdown-content{
        display:block;
    }
    .header{
        position: relative;
        z-index: 500;
    }

    /* Dashboard menu styles */
    .dashboard-menu .nav-link {
        display: flex;
        align-items: center;
        padding: 12px 15px;
        color: #666;
        transition: all 0.3s ease;
    }

    .dashboard-menu .nav-link i {
        margin-right: 10px;
        font-size: 20px;
    }

    .dashboard-menu .nav-link:hover,
    .dashboard-menu .nav-link.active {
        background-color: #f8f9fa;
        color: #3BB77E;
    }

    /* Checkout styles */
    .checkout-section {
        margin-bottom: 2rem;
    }

    .checkout-section-title {
        font-weight: 600;
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #dee2e6;
    }

    /* Address styles */
    .address-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .address-card {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        position: relative;
        transition: all 0.3s ease;
    }

    .address-card:hover {
        border-color: #3BB77E;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .address-card.selected {
        border-color: #3BB77E;
        background-color: rgba(59, 183, 126, 0.05);
    }

    .address-card .address-type {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background-color: #f8f9fa;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 600;
        color: #6c757d;
    }

    .address-card .address-type.default {
        background-color: #3BB77E;
        color: white;
    }

    .address-card .address-name {
        font-weight: 600;
        margin-bottom: 0.5rem;
        padding-right: 4rem;
    }

    .address-card .address-details {
        color: #6c757d;
        font-size: 0.9rem;
        line-height: 1.5;
    }

    .address-card .address-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 1rem;
    }

    .address-card .address-actions a {
        color: #3BB77E;
        margin-left: 1rem;
        font-size: 0.9rem;
    }

    .add-address-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        border: 1px dashed #dee2e6;
        border-radius: 8px;
        color: #3BB77E;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .add-address-btn:hover {
        border-color: #3BB77E;
        background-color: rgba(59, 183, 126, 0.05);
    }

    .add-address-btn i {
        margin-right: 0.5rem;
        font-size: 1.25rem;
    }

    /* Product styles */
    .checkout-products {
        margin-bottom: 1.5rem;
    }

    .checkout-product {
        display: flex;
        align-items: center;
        padding: 1rem 0;
        border-bottom: 1px solid #dee2e6;
    }

    .checkout-product:last-child {
        border-bottom: none;
    }

    .checkout-product-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 4px;
        margin-right: 1rem;
    }

    .checkout-product-details {
        flex-grow: 1;
    }

    .checkout-product-name {
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .checkout-product-variant {
        font-size: 0.85rem;
        color: #6c757d;
        margin-bottom: 0.25rem;
    }

    .checkout-product-price {
        color: #3BB77E;
        font-weight: 600;
    }

    .checkout-product-quantity {
        margin: 0 1.5rem;
        font-weight: 500;
    }

    .checkout-product-total {
        font-weight: 600;
        min-width: 80px;
        text-align: right;
    }

    /* Summary styles */
    .checkout-summary {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 1.5rem;
    }

    .checkout-summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.75rem;
    }

    .checkout-summary-row:last-child {
        margin-bottom: 0;
        padding-top: 0.75rem;
        border-top: 1px solid #dee2e6;
        font-weight: 600;
        font-size: 1.1rem;
    }
    .checkout-summary-title{
        font-weight: 600;
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #dee2e6;
    }
    .checkout-summary-label {
        color: #6c757d;
    }

    .checkout-summary-value {
        font-weight: 500;
    }

    .checkout-summary-value.discount {
        color: #3BB77E;
    }

    /* Payment methods */
    .payment-methods {
        margin-top: 1.5rem;
    }

    .payment-method {
        display: flex;
        align-items: center;
        padding: 1rem;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        margin-bottom: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .payment-method:hover {
        border-color: #3BB77E;
        background-color: rgba(59, 183, 126, 0.05);
    }

    .payment-method.selected {
        border-color: #3BB77E;
        background-color: rgba(59, 183, 126, 0.05);
    }

    .payment-method-icon {
        width: 40px;
        height: 40px;
        margin-right: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f8f9fa;
        border-radius: 4px;
    }

    .payment-method-icon img {
        max-width: 100%;
        max-height: 100%;
    }

    .payment-method-details {
        flex-grow: 1;
    }

    .payment-method-name {
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .payment-method-description {
        font-size: 0.85rem;
        color: #6c757d;
    }

    .payment-method-radio {
        margin-left: 1rem;
    }

    /* Place order button */
    .place-order-btn {
        display: block;
        width: 100%;
        padding: 1rem;
        background-color: #3BB77E;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        text-align: center;
        margin-top: 1.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .place-order-btn:hover {
        background-color: #2f9b6a;
    }

    /* Enhanced Mobile UI - Tablet View */
    @media (max-width: 991px) {
        .container {
            padding: 0 15px;
        }
        
        .checkout-section {
            margin-bottom: 1.5rem;
        }
        
        /* Enhanced Address Cards */
        .address-list {
            grid-template-columns: 1fr;
            gap: 0.75rem;
        }
        
        .address-card {
            padding: 1rem;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .address-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: #3BB77E;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .address-card.selected::before {
            opacity: 1;
        }
        
        .address-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(0,0,0,0.15);
        }
        
        /* Enhanced Product Cards */
        .checkout-product {
            flex-wrap: wrap;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 12px;
            margin-bottom: 0.75rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
        }
        
        .checkout-product:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .checkout-product-image {
            width: 70px;
            height: 70px;
            margin-right: 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .checkout-product-details {
            flex: 1;
            min-width: 0;
        }
        
        .checkout-product-name {
            font-size: 0.95rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 0.25rem;
        }
        
        .checkout-product-price {
            color: #3BB77E;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .checkout-product-quantity {
            margin: 0.5rem 0;
            width: 100%;
            font-size: 0.85rem;
            background: #fff;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            display: inline-block;
        }

        .checkout-product-total {
            width: 100%;
            text-align: right;
            margin-top: 0.5rem;
            font-size: 1rem;
            font-weight: 600;
            color: #333;
        }
        
        /* Enhanced Payment Methods */
        .payment-method {
            padding: 1rem;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .payment-method::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: #3BB77E;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .payment-method.selected::before {
            opacity: 1;
        }
        
        .payment-method:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(0,0,0,0.15);
        }
        
        .payment-method-icon {
            width: 40px;
            height: 40px;
            margin-right: 1rem;
            border-radius: 8px;
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }
        
        .payment-method-name {
            font-weight: 600;
            color: #333;
            margin-bottom: 0.25rem;
        }
        
        .payment-method-description {
            color: #666;
            font-size: 0.85rem;
        }
        
        /* Enhanced Summary */
        .checkout-summary {
            padding: 1.5rem;
            border-radius: 16px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        
        .checkout-summary-title {
            font-size: 1.1rem;
            margin-bottom: 1.5rem;
            color: #333;
            font-weight: 600;
            text-align: center;
            padding-bottom: 0.75rem;
            border-bottom: 2px solid #3BB77E;
        }
        
        .checkout-summary-row {
            padding: 0.5rem 0;
            border-bottom: 1px solid rgba(0,0,0,0.05);
            font-size: 0.9rem;
        }
        
        .checkout-summary-row:last-child {
            border-bottom: none;
            font-size: 1.1rem;
            font-weight: 700;
            color: #3BB77E;
            padding-top: 1rem;
            border-top: 2px solid #3BB77E;
        }
        
        /* Enhanced Place Order Button */
        .place-order-btn {
            padding: 1rem;
            font-size: 1rem;
            font-weight: 600;
            border-radius: 12px;
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            box-shadow: 0 4px 16px rgba(59, 183, 126, 0.3);
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .place-order-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(59, 183, 126, 0.4);
            background: linear-gradient(135deg, #2d8f5f, #1e6b4a);
        }
        
        /* Enhanced Coupon Section */
        .coupon-input {
            flex-direction: column;
            gap: 0.75rem;
        }
        
        .coupon-input input {
            width: 100%;
            border-radius: 8px;
            border: 2px solid #e9ecef;
            transition: border-color 0.3s ease;
        }
        
        .coupon-input input:focus {
            border-color: #3BB77E;
            box-shadow: 0 0 0 3px rgba(59, 183, 126, 0.1);
        }
        
        .coupon-input button {
            width: 100%;
            margin-top: 0.25rem;
            border-radius: 8px;
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            border: none;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .coupon-input button:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(59, 183, 126, 0.3);
        }
        
        .select-coupon-btn {
            width: 100%;
            margin-top: 0.25rem;
            border-radius: 8px;
            background: linear-gradient(135deg, #6c757d, #5a6268);
            border: none;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .select-coupon-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(108, 117, 125, 0.3);
        }
        
        /* Enhanced Add Address Button */
        .add-address-btn {
            border-radius: 12px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border: 2px dashed #3BB77E;
            transition: all 0.3s ease;
            font-weight: 600;
        }
        
        .add-address-btn:hover {
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(59, 183, 126, 0.3);
        }
    }

    /* Enhanced Mobile UI - Mobile View */
    @media (max-width: 767.98px) {
        /* Mobile Header Enhancements */
        .page-header {
            padding: 1rem 0;
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            color: white;
            margin-bottom: 1rem;
        }
        
        .breadcrumb {
            font-size: 0.85rem;
            color: rgba(255,255,255,0.9);
        }
        
        .breadcrumb a {
            color: rgba(255,255,255,0.9);
        }
        
        .breadcrumb a:hover {
            color: white;
        }
        
        /* Enhanced Card Headers */
        .card-header {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 12px 12px 0 0;
            border-bottom: 2px solid #3BB77E;
        }
        
        .card-header h4 {
            font-size: 1.1rem;
            font-weight: 600;
            color: #333;
            margin: 0;
            display: flex;
            align-items: center;
        }
        
        .card-header h4::before {
            content: '';
            width: 4px;
            height: 20px;
            background: #3BB77E;
            margin-right: 0.75rem;
            border-radius: 2px;
        }
        
        /* Enhanced Address Cards */
        .address-card {
            padding: 1rem;
            border-radius: 16px;
            box-shadow: 0 4px 16px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            margin-bottom: 0.75rem;
        }
        
        .address-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 6px;
            height: 100%;
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .address-card.selected::before {
            opacity: 1;
        }
        
        .address-card.selected {
            background: linear-gradient(135deg, rgba(59, 183, 126, 0.05), rgba(45, 143, 95, 0.05));
            border-color: #3BB77E;
            transform: scale(1.02);
        }
        
        .address-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        
        .address-card .address-name {
            font-size: 1rem;
            font-weight: 600;
            color: #333;
            padding-right: 3rem;
            margin-bottom: 0.5rem;
        }
        
        .address-card .address-details {
            font-size: 0.85rem;
            line-height: 1.5;
            color: #666;
        }
        
        .default-badge {
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            box-shadow: 0 2px 8px rgba(59, 183, 126, 0.3);
        }
        
        /* Enhanced Add Address Button */
        .add-address-btn {
            padding: 1.25rem;
            font-size: 1rem;
            border-radius: 16px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border: 3px dashed #3BB77E;
            transition: all 0.3s ease;
            font-weight: 600;
            color: #3BB77E;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }
        
        .add-address-btn:hover {
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(59, 183, 126, 0.3);
        }
        
        .add-address-btn i {
            font-size: 1.25rem;
        }
        
        /* Enhanced Product Cards */
        .checkout-product {
            padding: 1rem;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 16px;
            margin-bottom: 1rem;
            box-shadow: 0 4px 16px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .checkout-product::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            opacity: 0.7;
        }
        
        .checkout-product:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        
        .checkout-product-image {
            width: 80px;
            height: 80px;
            margin-right: 1rem;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            object-fit: cover;
        }
        
        .checkout-product-details {
            flex: 1;
            min-width: 0;
        }
        
        .checkout-product-name {
            font-size: 1rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 0.5rem;
            line-height: 1.3;
        }
        
        .checkout-product-price {
            color: #3BB77E;
            font-weight: 600;
            font-size: 1rem;
            margin-bottom: 0.25rem;
        }
        
        .checkout-product-quantity {
            font-size: 0.9rem;
            background: white;
            padding: 0.5rem 0.75rem;
            border-radius: 8px;
            display: inline-block;
            color: #666;
            font-weight: 500;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .checkout-product-total {
            font-size: 1.1rem;
            font-weight: 700;
            color: #333;
            text-align: right;
            margin-top: 0.5rem;
        }
        
        /* Enhanced Payment Methods */
        .payment-method {
            padding: 1.25rem;
            border-radius: 16px;
            box-shadow: 0 4px 16px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            margin-bottom: 1rem;
        }
        
        .payment-method::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 6px;
            height: 100%;
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .payment-method.selected::before {
            opacity: 1;
        }
        
        .payment-method.selected {
            background: linear-gradient(135deg, rgba(59, 183, 126, 0.05), rgba(45, 143, 95, 0.05));
            border-color: #3BB77E;
            transform: scale(1.02);
        }
        
        .payment-method:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        
        .payment-method-icon {
            width: 50px;
            height: 50px;
            margin-right: 1rem;
            border-radius: 12px;
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            box-shadow: 0 4px 12px rgba(59, 183, 126, 0.3);
        }
        
        .payment-method-name {
            font-size: 1.1rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 0.25rem;
        }
        
        .payment-method-description {
            color: #666;
            font-size: 0.9rem;
            line-height: 1.4;
        }
        
        .wallet-balance {
            background: rgba(59, 183, 126, 0.1);
            padding: 0.25rem 0.5rem;
            border-radius: 6px;
            font-size: 0.8rem;
            font-weight: 600;
            color: #3BB77E;
            margin-top: 0.25rem;
            display: inline-block;
        }
        
        /* Enhanced Summary */
        .checkout-summary {
            padding: 1.5rem;
            border-radius: 20px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            position: relative;
            overflow: hidden;
        }
        
        .checkout-summary::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
        }
        
        .checkout-summary-title {
            font-size: 1.2rem;
            margin-bottom: 1.5rem;
            color: #333;
            font-weight: 700;
            text-align: center;
            padding-bottom: 1rem;
            border-bottom: 2px solid #3BB77E;
            position: relative;
        }
        
        .checkout-summary-title::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 2px;
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
        }
        
        .checkout-summary-row {
            padding: 0.75rem 0;
            border-bottom: 1px solid rgba(0,0,0,0.05);
            font-size: 0.95rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .checkout-summary-row:last-child {
            border-bottom: none;
            font-size: 1.3rem;
            font-weight: 700;
            color: #3BB77E;
            padding-top: 1.5rem;
            border-top: 2px solid #3BB77E;
            margin-top: 1rem;
        }
        
        /* Enhanced Place Order Button */
        .place-order-btn {
            padding: 1.25rem;
            font-size: 1.1rem;
            font-weight: 700;
            border-radius: 16px;
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            box-shadow: 0 8px 25px rgba(59, 183, 126, 0.3);
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            border: none;
            color: white;
            width: 100%;
            margin-top: 1.5rem;
        }
        
        .place-order-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 35px rgba(59, 183, 126, 0.4);
            background: linear-gradient(135deg, #2d8f5f, #1e6b4a);
        }
        
        .place-order-btn:active {
            transform: translateY(-1px);
        }
        
        /* Enhanced Coupon Section */
        .coupon-section {
            background: white;
            padding: 1.5rem;
            border-radius: 20px;
            box-shadow: 0 6px 20px rgba(0,0,0,0.12);
            margin-bottom: 2rem;
        }
        
        .coupon-input {
            margin-bottom: 1.5rem;
        }
        
        .coupon-input input {
            padding: 1rem 1.25rem;
            font-size: 1.1rem;
            border-radius: 16px;
            border: 3px solid #e9ecef;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }
        
        .coupon-input input:focus {
            border-color: #3BB77E;
            box-shadow: 0 0 0 6px rgba(59, 183, 126, 0.15);
            background: white;
        }
        
        .coupon-input button {
            padding: 1rem 1.25rem;
            font-size: 1rem;
            border-radius: 16px;
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            border: none;
            font-weight: 700;
            transition: all 0.3s ease;
            color: white;
            box-shadow: 0 6px 16px rgba(59, 183, 126, 0.4);
        }
        
        .coupon-input button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(59, 183, 126, 0.5);
        }
        
        .select-coupon-btn {
            padding: 1rem 1.25rem;
            font-size: 1rem;
            border-radius: 16px;
            background: linear-gradient(135deg, #6c757d, #5a6268);
            border: none;
            font-weight: 700;
            transition: all 0.3s ease;
            color: white;
            box-shadow: 0 6px 16px rgba(108, 117, 125, 0.4);
        }
        
        .select-coupon-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(108, 117, 125, 0.5);
        }
        
        /* Enhanced Coupon Dropdown */
        .coupon-dropdown {
            max-height: 250px;
            border-radius: 16px;
            box-shadow: 0 12px 35px rgba(0,0,0,0.18);
            border: 2px solid #e9ecef;
        }
        
        .coupon-item {
            padding: 1.25rem;
            border-radius: 12px;
            margin: 0.5rem;
            transition: all 0.3s ease;
        }
        
        .coupon-item:hover {
            background: linear-gradient(135deg, rgba(59, 183, 126, 0.08), rgba(45, 143, 95, 0.08));
        }
        
        .coupon-item.selected {
            background: linear-gradient(135deg, rgba(59, 183, 126, 0.15), rgba(45, 143, 95, 0.15));
            border-left: 6px solid #3BB77E;
        }
        
        .coupon-code {
            font-size: 1.1rem;
            font-weight: 800;
        }
        
        .coupon-description {
            font-size: 1rem;
            line-height: 1.5;
        }
        
        .coupon-terms {
            font-size: 0.85rem;
            color: #999;
        }
        
        .coupon-actions {
            padding: 1.5rem;
            gap: 1rem;
            background: #f8f9fa;
            border-radius: 16px;
            margin-top: 1.5rem;
        }
        
        .apply-selected-btn,
        .clear-selection-btn {
            padding: 1rem 1.25rem;
            font-size: 1rem;
            border-radius: 16px;
            font-weight: 700;
            transition: all 0.3s ease;
            border: none;
        }
        
        .apply-selected-btn {
            background: linear-gradient(135deg, #3BB77E, #2d8f5f);
            color: white;
            box-shadow: 0 6px 16px rgba(59, 183, 126, 0.4);
        }
        
        .clear-selection-btn {
            background: linear-gradient(135deg, #6c757d, #5a6268);
            color: white;
            box-shadow: 0 6px 16px rgba(108, 117, 125, 0.4);
        }
        
        .apply-selected-btn:hover,
        .clear-selection-btn:hover {
            transform: translateY(-3px);
        }
        
        .coupon-success-message {
            padding: 1.25rem;
            font-size: 1rem;
            border-radius: 16px;
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            border: 2px solid #c3e6cb;
            color: #155724;
            font-weight: 700;
        }
        
        .remove-coupon-btn {
            font-size: 0.9rem;
            padding: 0.75rem 1rem;
            border-radius: 12px;
            background: rgba(220, 53, 69, 0.15);
            color: #dc3545;
            border: 2px solid rgba(220, 53, 69, 0.3);
            transition: all 0.3s ease;
            font-weight: 600;
        }
        
        .remove-coupon-btn:hover {
            background: rgba(220, 53, 69, 0.25);
            color: #c82333;
            transform: translateY(-2px);
        }
        
        /* Enhanced Coupon Success Message */
        .coupon-success-message {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            border: 2px solid #c3e6cb;
            border-radius: 16px;
            padding: 1.25rem;
            color: #155724;
            font-weight: 500;
            position: relative;
            overflow: hidden;
        }
        
        .coupon-success-message::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(135deg, #28a745, #20c997);
        }
        
        .success-content {
            flex: 1;
        }
        
        .success-header {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        
        .success-title {
            font-weight: 700;
            font-size: 1rem;
        }
        
        .success-details {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }
        
        .coupon-applied-info {
            font-weight: 600;
            color: #0f5132;
        }
        
        .savings-info {
            color: #198754;
            font-weight: 600;
        }
        
        .usage-info {
            color: #6c757d;
            font-style: italic;
        }
        
        /* Coupon Toast Notifications */
        .coupon-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            border-radius: 12px;
            padding: 1rem 1.5rem;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            display: flex;
            align-items: center;
            gap: 0.75rem;
            z-index: 9999;
            animation: slideInRight 0.3s ease-out;
            border-left: 4px solid;
        }
        
        .coupon-toast.success {
            border-left-color: #28a745;
            color: #155724;
        }
        
        .coupon-toast.error {
            border-left-color: #dc3545;
            color: #721c24;
        }
        
        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    }
    
    /* Additional mobile optimizations */
    .row {
        margin: 0;
    }
    
    .col-lg-8,
    .col-lg-4 {
        padding: 0 5px;
    }
    
    .checkout-section {
        margin-bottom: 1rem;
    }
    
    .card {
        margin-bottom: 0.75rem;
    }
    
    /* Improve touch targets on mobile */
    .payment-method,
    .address-card {
        min-height: 44px;
    }
    
    .place-order-btn {
        min-height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    /* Better spacing for mobile */
    .mt-50 {
        margin-top: 1.5rem !important;
    }
    
    .mb-50 {
        margin-bottom: 1.5rem !important;
    }
    
    /* Improve form elements on mobile */
    input[type="radio"],
    input[type="text"] {
        min-height: 44px;
    }
    
    /* Better button spacing */
    .coupon-input button,
    .select-coupon-btn {
        min-height: 44px;
    }
    
    /* Improve wallet balance display on mobile */
    .wallet-balance {
        font-size: 11px !important;
        margin-top: 1px !important;
    }
    
    /* Better payment method layout on mobile */
    .payment-method-details {
        flex: 1;
        min-width: 0;
    }
    
    /* Improve address card layout on mobile */
    .address-card .address-name {
        word-wrap: break-word;
        overflow-wrap: break-word;
    }
    
    .address-card .address-details {
        word-wrap: break-word;
        overflow-wrap: break-word;
    }
    
    /* Better product image display on mobile */
    .checkout-product-image {
        flex-shrink: 0;
    }
    
    /* Improve summary layout on mobile */
    .checkout-summary-row {
        word-wrap: break-word;
        overflow-wrap: break-word;
    }
    
    /* Better coupon dropdown on mobile */
    .coupon-dropdown {
        z-index: 1000;
        position: relative;
    }
    
    /* Improve form validation messages on mobile */
    .coupon-invalid,
    .coupon-valid {
        font-size: 0.75rem;
        margin-top: 0.25rem;
    }

    /* Stock status indicators */
    .stock-status {
      margin-top: 0.25rem;
    }

    .stock-indicator {
      font-size: 0.8rem;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-weight: 500;
    }

    .stock-indicator.loading {
      color: #6c757d;
      background-color: #f8f9fa;
    }

    .stock-indicator.in-stock {
      color: #28a745;
      background-color: #d4edda;
    }

    .stock-indicator.low-stock {
      color: #ffc107;
      background-color: #fff3cd;
    }

    .stock-indicator.out-of-stock {
      color: #dc3545;
      background-color: #f8d7da;
    }

    .stock-indicator.insufficient {
      color: #dc3545;
      background-color: #f8d7da;
    }
}

/* Payment method and address card selection styles */
.payment-method {
  border: 2px solid transparent;   
  border-radius: 6px;
  padding: 12px;
  cursor: pointer;
  transition: border-color 0.2s ease;
}

.payment-method.selected {
  border-color: #3BB77E;            
}

.address-card {
  border: 2px solid transparent;
  border-radius: 6px;
  padding: 12px;
  margin-bottom: 12px;
  cursor: pointer;
  transition: border-color 0.2s ease;
}

.address-card.selected {
  border-color: #3BB77E;
}

/* default */

.default-badge {
  background-color: #4caf50;
  color: white;
  padding: 2px 8px;
  font-size: 12px;
  border-radius: 12px;
  margin-left: 8px;
  display: inline-block;
  vertical-align: middle;
}

.set-default {
  margin-left: 10px;
  color: #007bff;
  cursor: pointer;
}

.selected {
  border: 2px solid #4caf50;
  box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
}

/* Coupon section styles */
.coupon-section {
  margin-bottom: 1.5rem;
}

.coupon-input {
  display: flex;
  margin-bottom: 10px;
  gap: 5px;
}

.coupon-input input {
  flex: 1;
  padding: 8px 15px;
  border: 1px solid #dee2e6;
  border-radius: 4px;
  font-size: 14px;
}

.coupon-input button {
  padding: 8px 15px;
  background-color: #3BB77E;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 12px;
}

.coupon-input button:hover {
  background-color: #2f9b6a;
}

.select-coupon-btn {
  background-color: #6c757d !important;
  white-space: nowrap;
}

.select-coupon-btn:hover {
  background-color: #5a6268 !important;
}

.coupon-dropdown {
  display: none;
  border: 1px solid #dee2e6;
  border-radius: 4px;
  max-height: 200px;
  overflow-y: auto;
  margin-bottom: 15px;
}

.coupon-dropdown.active {
  display: block;
}

.coupon-item {
  padding: 10px 15px;
  border-bottom: 1px solid #f1f1f1;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.coupon-item:last-child {
  border-bottom: none;
}

.coupon-item:hover {
  background-color: #f8f9fa;
}

.coupon-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 5px;
}

.coupon-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex: 1;
}

.coupon-selection {
  display: flex;
  align-items: center;
  margin-left: 15px;
}

.coupon-selection input[type="radio"] {
  margin-right: 5px;
  cursor: pointer;
}

.select-label {
  font-size: 12px;
  color: #3BB77E;
  cursor: pointer;
  font-weight: 500;
  padding: 2px 8px;
  border: 1px solid #3BB77E;
  border-radius: 3px;
  transition: all 0.2s ease;
}

.select-label:hover {
  background-color: #3BB77E;
  color: white;
}

.coupon-item.selected {
  background-color: rgba(59, 183, 126, 0.1);
  border-left: 3px solid #3BB77E;
}

.coupon-item.selected .select-label {
  background-color: #3BB77E;
  color: white;
}

.coupon-code {
  font-weight: 600;
  color: #3BB77E;
  font-size: 14px;
}

.coupon-discount {
  font-weight: 600;
  color: #dc3545;
  font-size: 12px;
  background-color: #fff3cd;
  padding: 2px 6px;
  border-radius: 4px;
}

.coupon-description {
  font-size: 12px;
  color: #6c757d;
  margin-bottom: 3px;
}

.coupon-terms {
  font-size: 11px;
  color: #999;
  font-style: italic;
}

.coupon-invalid {
  color: #dc3545;
  font-size: 12px;
  margin-top: 5px;
  display: none;
}

.coupon-valid {
  color: #3BB77E;
  font-size: 12px;
  margin-top: 5px;
  display: none;
}

.coupon-success-message {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #d4edda;
  border: 1px solid #c3e6cb;
  border-radius: 4px;
  padding: 8px 12px;
}

.coupon-success-message span {
  color: #155724;
  font-weight: 500;
}

.remove-coupon-btn {
  background: none;
  border: none;
  color: #dc3545;
  font-size: 12px;
  padding: 4px 8px;
  cursor: pointer;
  margin-left: 10px;
  text-decoration: underline;
  border-radius: 3px;
  transition: background-color 0.2s ease;
}

.remove-coupon-btn:hover {
  color: #c82333;
  background-color: rgba(220, 53, 69, 0.1);
}

.coupon-summary-row {
  color: #3BB77E;
  font-weight: 500;
}

.coupon-item.selected .select-label {
  background-color: #3BB77E;
  color: white;
}

/* Enhanced Coupon Styles */
.coupon-item {
  padding: 1.25rem;
  border-radius: 12px;
  margin: 0.75rem;
  transition: all 0.3s ease;
  border: 2px solid transparent;
  background: linear-gradient(135deg, #f8f9fa, #e9ecef);
  position: relative;
  overflow: hidden;
}

.coupon-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 4px;
  height: 100%;
  background: linear-gradient(135deg, #3BB77E, #2d8f5f);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.coupon-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.15);
  border-color: rgba(59, 183, 126, 0.3);
}

.coupon-item.selected {
  background: linear-gradient(135deg, rgba(59, 183, 126, 0.08), rgba(45, 143, 95, 0.08));
  border-color: #3BB77E;
  transform: scale(1.02);
}

.coupon-item.selected::before {
  opacity: 1;
}

.coupon-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 1rem;
}

.coupon-info {
  flex: 1;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
}

.coupon-main-info {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.coupon-code {
  font-size: 1.2rem;
  font-weight: 800;
  color: #3BB77E;
  letter-spacing: 1px;
}

.coupon-discount-info {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.coupon-discount {
  font-size: 1.1rem;
  font-weight: 700;
  color: #dc3545;
  background: linear-gradient(135deg, #fff3cd, #ffeaa7);
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  display: inline-block;
  border: 2px solid #ffc107;
}

.savings-percentage {
  font-size: 0.8rem;
  color: #28a745;
  font-weight: 600;
}

.usage-badge {
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.usage-badge.single-use {
  background: linear-gradient(135deg, #ff6b6b, #ee5a52);
  color: white;
}

.usage-badge.multi-use {
  background: linear-gradient(135deg, #4ecdc4, #44a08d);
  color: white;
}

.coupon-description {
  font-size: 0.95rem;
  color: #333;
  margin-bottom: 1rem;
  line-height: 1.4;
}

.coupon-terms {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.term-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.85rem;
  color: #666;
}

.term-item i {
  color: #3BB77E;
  font-size: 0.9rem;
}

.coupon-empty-state {
  text-align: center;
  padding: 2rem 1rem;
  color: #999;
}

.coupon-empty-state p {
  margin: 0.5rem 0;
  font-weight: 600;
}

.coupon-empty-state small {
  font-size: 0.8rem;
}

.coupon-actions {
  display: flex;
  gap: 10px;
  margin-top: 10px;
  padding: 10px;
  background-color: #f8f9fa;
  border-radius: 4px;
  border: 1px solid #dee2e6;
}

.apply-selected-btn {
  flex: 1;
  padding: 8px 15px;
  background-color: #3BB77E;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.3s ease;
}

.apply-selected-btn:hover {
  background-color: #2f9b6a;
}

.apply-selected-btn:disabled {
  background-color: #6c757d;
  cursor: not-allowed;
}

.clear-selection-btn {
  padding: 8px 15px;
  background-color: #6c757d;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.3s ease;
}

.clear-selection-btn:hover {
  background-color: #5a6268;
}

.coupon-empty-state small {
  font-size: 0.8rem;
}

/* Enhanced Coupon Success Message */
.coupon-success-message {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  background: linear-gradient(135deg, #d4edda, #c3e6cb);
  border: 2px solid #c3e6cb;
  border-radius: 16px;
  padding: 1.25rem;
  color: #155724;
  font-weight: 500;
  position: relative;
  overflow: hidden;
}

.coupon-success-message::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 4px;
  height: 100%;
  background: linear-gradient(135deg, #28a745, #20c997);
}

.success-content {
  flex: 1;
}

.success-header {
  display: flex;
  align-items: center;
  margin-bottom: 0.5rem;
}

.success-title {
  font-weight: 700;
  font-size: 1rem;
}

.success-details {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.coupon-applied-info {
  font-weight: 600;
  color: #0f5132;
}

.savings-info {
  color: #198754;
  font-weight: 600;
}

.usage-info {
  color: #6c757d;
  font-style: italic;
}

/* Enhanced Remove Coupon Button */
.remove-coupon-btn {
  background: rgba(220, 53, 69, 0.1);
  color: #dc3545;
  border: 2px solid rgba(220, 53, 69, 0.3);
  border-radius: 8px;
  padding: 0.5rem 1rem;
  font-size: 0.85rem;
  font-weight: 600;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.25rem;
  white-space: nowrap;
}

.remove-coupon-btn:hover {
  background: rgba(220, 53, 69, 0.2);
  color: #c82333;
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(220, 53, 69, 0.2);
}

/* Coupon Toast Notifications */
.coupon-toast {
  position: fixed;
  top: 20px;
  right: 20px;
  background: white;
  border-radius: 12px;
  padding: 1rem 1.5rem;
  box-shadow: 0 8px 25px rgba(0,0,0,0.15);
  display: flex;
  align-items: center;
  gap: 0.75rem;
  z-index: 9999;
  animation: slideInRight 0.3s ease-out;
  border-left: 4px solid;
}

.coupon-toast.success {
  border-left-color: #28a745;
  color: #155724;
}

.coupon-toast.error {
  border-left-color: #dc3545;
  color: #721c24;
}

@keyframes slideInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

/* Enhanced Coupon Input Styling */
.coupon-input {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1rem;
  align-items: stretch;
}

.coupon-input input {
  flex: 1;
  padding: 0.75rem 1rem;
  border: 2px solid #e9ecef;
  border-radius: 8px;
  font-size: 0.9rem;
  transition: all 0.3s ease;
  background: #f8f9fa;
}

.coupon-input input:focus {
  outline: none;
  border-color: #3BB77E;
  box-shadow: 0 0 0 3px rgba(59, 183, 126, 0.1);
  background: white;
}

.coupon-input button {
  padding: 0.75rem 1.5rem;
  background: linear-gradient(135deg, #3BB77E, #2d8f5f);
  color: white;
  border: none;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  white-space: nowrap;
}

.coupon-input button:hover:not(:disabled) {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(59, 183, 126, 0.3);
}

.coupon-input button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none;
}

.select-coupon-btn {
  background: linear-gradient(135deg, #6c757d, #5a6268) !important;
  white-space: nowrap;
}

.select-coupon-btn:hover:not(:disabled) {
  background: linear-gradient(135deg, #5a6268, #495057) !important;
}

.coupon-actions {
  display: flex;
  gap: 10px;
  margin-top: 10px;
  padding: 10px;
  background-color: #f8f9fa;
  border-radius: 4px;
  border: 1px solid #dee2e6;
}

</style>

<!-- Responsive Header for Mobile/Tablet (copied from home.ejs, adjusted for checkout context) -->
<style>
/* General Reset */
.header, .header-area, .header-middle, .header-bottom, .header-top, .header-wrap, .header-action-right, .header-action-2, .header-action-icon-2, .logo {
    box-sizing: border-box;
}
/* Modern Flex Header */
.responsive-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1rem;
    background: #fff;
    border-bottom: 1px solid #eee;
    position: sticky;
    top: 0;
    z-index: 1002;
}
.responsive-header .logo {
    font-size: 1.7rem;
    font-weight: 700;
    color: #222;
    letter-spacing: 1px;
    text-decoration: none;
    display: flex;
    align-items: center;
}
.responsive-header .logo img {
    height: 36px;
    margin-right: 8px;
}
.responsive-header .header-icons {
    display: flex;
    align-items: center;
    gap: 1.2rem;
}
.responsive-header .header-icons a {
    display: flex;
    align-items: center;
    position: relative;
    color: #222;
    transition: color 0.2s;
    font-size: 1.3rem;
}
.responsive-header .header-icons a .wishlist-heart.red {
    color: #ff3b3b !important;
}
.responsive-header .header-icons a .wishlist-heart {
    transition: color 0.2s;
}
.responsive-header .header-icons a:hover {
    color: #007bff;
}
.hamburger {
    display: none;
    flex-direction: column;
    justify-content: center;
    width: 38px;
    height: 38px;
    background: #fff;
    border: 1px solid #eee;
    border-radius: 6px;
    cursor: pointer;
    align-items: center;
    z-index: 1101;
    margin-left: 0.5rem;
}
.hamburger span {
    display: block;
    width: 22px;
    height: 3px;
    background: #222;
    margin: 3px 0;
    border-radius: 2px;
    transition: all 0.3s;
}
.menu-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0,0,0,0.25);
    z-index: 1199;
    opacity: 0;
    transition: opacity 0.3s;
}
.menu-overlay.active {
    display: block;
    opacity: 1;
}
.mobile-menu {
    display: none;
    position: fixed;
    top: 0;
    left: -260px;
    width: 240px;
    height: 100vh;
    background: #fff;
    box-shadow: 2px 0 12px rgba(0,0,0,0.08);
    z-index: 1200;
    transition: left 0.3s;
    padding: 2.5rem 1.5rem 1.5rem 1.5rem;
    flex-direction: column;
    gap: 1.5rem;
}
.mobile-menu.active {
    left: 0;
    display: flex;
}
.mobile-menu .menu-link {
    font-size: 1.15rem;
    color: #222;
    text-decoration: none;
    margin-bottom: 1.2rem;
    font-weight: 500;
    transition: color 0.2s;
}
.mobile-menu .menu-link.active,
.mobile-menu .menu-link:hover {
    color: #007bff;
}
.mobile-menu .close-menu {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 1.5rem;
    color: #222;
    cursor: pointer;
}
@media (max-width: 991px) {
    .header-area, .header-middle, .header-bottom, .header-top {
        display: none !important;
    }
    .responsive-header {
        display: flex;
    }
    .hamburger {
        display: flex;
    }
    .mobile-menu {
        display: flex;
    }
}
@media (min-width: 992px) {
    .responsive-header, .mobile-menu, .menu-overlay {
        display: none !important;
    }
    .responsive-header .logo {
        margin-left: auto;
        margin-right: 0;
    }
}
</style>
<div class="responsive-header">
    <a href="/home" class="logo">
        <img src="/assets/imgs/theme/shoestore-logo.svg" alt="ShoeStore" onerror="this.style.display='none';">
    </a>
    <div class="header-icons">
        <a href="/wishlist" title="Wishlist"><i class="fi-rs-heart wishlist-heart"></i></a>
        <a href="/cart" title="Cart"><i class="fi-rs-shopping-cart"></i></a>
        <button class="hamburger" id="mobileMenuToggle" aria-label="Open menu">
            <span></span><span></span><span></span>
        </button>
    </div>
</div>
<div class="menu-overlay" id="menuOverlay"></div>
<nav class="mobile-menu" id="mobileMenu" aria-label="Mobile navigation">
    <button class="close-menu" id="closeMobileMenu" aria-label="Close menu">&times;</button>
    <a href="/home" class="menu-link">Home</a>
    <a href="/shop" class="menu-link">Shop</a>
    <a href="/cart" class="menu-link">Cart</a>
    <a href="/profileinfo" class="menu-link">Profile</a>
    <a href="/logout" class="menu-link">Logout</a>
</nav>
<script>
// Mobile menu toggle
(function() {
    const menuToggle = document.getElementById('mobileMenuToggle');
    const mobileMenu = document.getElementById('mobileMenu');
    const menuOverlay = document.getElementById('menuOverlay');
    const closeMenuBtn = document.getElementById('closeMobileMenu');
    function openMenu() {
        mobileMenu.classList.add('active');
        menuOverlay.classList.add('active');
        document.body.style.overflow = 'hidden';
    }
    function closeMenu() {
        mobileMenu.classList.remove('active');
        menuOverlay.classList.remove('active');
        document.body.style.overflow = '';
    }
    menuToggle.addEventListener('click', openMenu);
    closeMenuBtn.addEventListener('click', closeMenu);
    menuOverlay.addEventListener('click', closeMenu);
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && mobileMenu.classList.contains('active')) closeMenu();
    });
})();
</script>
<!-- End Responsive Header -->

<header class="header-area header-style-1 header-height-2">
    <div class="header-top header-top-ptb-1 d-none d-lg-block">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-xl-3 col-lg-4">
                    <div class="header-info">
                        <ul>
                            
                            <!-- <li><i class="fi-rs-marker"></i><a href="/contact">Our location</a></li> -->
                        </ul>
                    </div>
                </div>
                <div class="col-xl-6 col-lg-4">
                    <div class="text-center">
                    </div>
                </div>
                <div class="col-xl-3 col-lg-4">
                    <div class="header-info header-info-right">
                        <ul>
                            <li>
                                <a class="language-dropdown-active" href="#"> 
                                    <i class="fi-rs-world"></i> English <i class="fi-rs-angle-small-down"></i>
                                </a>
                            </li>
                            <% if (typeof user !== 'undefined' && user) { %>
                                <div class="dropdown">
                                    <a href="#" class="sign-in-link"><%= user.name %></a>
                                    <div class="dropdown-content">
                                        <a href="/profileinfo">Profile</a>
                                        <a href="/logout">Logout</a>
                                    </div>
                                </div>
                            <% } else { %>
                                <li><i class="fi-rs-user"></i><a href="/signup">Log in/Sign Up</a></li>
                            <% } %>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="header-middle header-middle-ptb-1 d-none d-lg-block">
        <div class="container">
            <div class="header-wrap">
                <div class="logo logo-width-1">
                   <img src="/assets/imgs/theme/shoestore-logo.svg" alt="logo">
                </div>
                <div class="header-right">
                    <div class="search-style-2">
                        <!-- <form action="/search" method="get">
                            <input type="text" placeholder="Search for items..." name="query">
                        </form> -->
                    </div>
                    <div class="header-action-right">
                        <div class="header-action-2">
                            <div class="header-action-icon-2">
                                <a href="/wishlist">
                                  <i class="fi-rs-heart wishlist-heart"></i>
                                    <!-- <img class="svgInject" alt="Evara" src="assets/imgs/theme/icons/icon-heart.svg"> -->
                                    <!-- <span class="pro-count blue">0</span> -->
                                </a>
                            </div>
                            <div class="header-action-icon-2">
                                <a class="mini-cart-icon" href="/cart">
                                  <i class="fi-rs-shopping-cart"></i>
                                    <!-- <img alt="Evara" src="assets/imgs/theme/icons/icon-cart.svg"> -->
                                    <!-- <span class="pro-count blue">3</span> -->
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="header-bottom header-bottom-bg-color sticky-bar">
        <div class="container">
            <div class="header-wrap header-space-between position-relative">
                <div class="logo logo-width-1 d-block d-lg-none">
                    <a href="/"><img src="/assets/imgs/theme/shoestore-logo.svg" alt="logo"></a>
                </div>
                <div class="header-nav d-none d-lg-flex">
                    <div class="main-menu main-menu-padding-1 main-menu-lh-2 d-none d-lg-block">
                        <nav>
                            <ul>
                                <li><a href="/">Home</a></li>
                                <li><a href="/shop">Shop</a></li>
                            </ul>
                        </nav>
                    </div>
                </div>
                <div class="hotline d-none d-lg-block">

                </div>   
                <div class="header-action-icon-2 d-block d-lg-none">
                    <div class="burger-icon burger-icon-white">
                        <span class="burger-icon-top"><span></span><span></span><span></span></span>
                        <span class="burger-icon-mid"><span></span><span></span><span></span></span>
                        <span class="burger-icon-bottom"><span></span><span></span><span></span></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</header>

<div class="mobile-header-active mobile-header-wrapper-style perfect-scrollbar">
    <div class="mobile-header-wrapper-inner">
        <div class="mobile-header-content-area">
            <div class="perfect-scroll">
                <div class="mobile-menu-wrap mobile-header-border">
                    <nav>
                        <ul class="mobile-menu font-heading">
                            <li><a class="active" href="/">Home</a></li>
                            <li><a href="/shop">Shop</a></li>
                        </ul>
                    </nav>
                </div>
                <div class="mobile-account">
                    <h6 class="mb-10px">My Account</h6>
                    <ul class="mobile-menu font-heading">
                        <li><a href="/profileinfo">Profile</a></li>
                        <li><a href="/myorders">My Orders</a></li>
                        <li><a href="/addresses">My Addresses</a></li>
                        <li><a href="/wishlist">Wishlist</a></li>
                        <li><a href="/wallet">My Wallet</a></li>
                        <li><a href="/logout">Logout</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<main class="main">
    <div class="page-header breadcrumb-wrap">
        <div class="container">
            <div class="breadcrumb">
                <a href="/" rel="nofollow">Home</a>
                <span></span> <a href="/cart">Cart</a>
                <span></span> Checkout
            </div>
        </div>
    </div>

    <section class="mt-50 mb-50">
    <div class="container">
        <form class="form" id="checkoutForm" action="/checkout" method="post">
            <div class="row">
              <div class="col-lg-8 col-md-12">
                <!-- Shipping Address Section -->
                <div class="checkout-section">
                  <div class="card">
                    <div class="card-header"><h4>Shipping Address</h4></div>
                    <div class="card-body address-list">
                      <% addresses.forEach(addr => { %>
                      <label class="address-card <%= addr.isDefault ? 'selected' : '' %>">
                        <input
                          type="radio"
                          name="selectedAddress"
                          value="<%= addr._id %>"
                          hidden
                          <%= addr.isDefault ? 'checked' : '' %>
                          required
                        />
                        <div class="address-name">
                          <%= addr.name %>
                          <% if (addr.isDefault) { %>
                            <span class="default-badge">Default</span>
                          <% } %>
                        </div>
                        <div class="address-details">
                          <%= addr.addressLine1 %><br />
                          <% if (addr.addressLine2) { %>
                            <%= addr.addressLine2 %><br />
                          <% } %>
                          <%= addr.city %>, <%= addr.state %> <%= addr.pincode %><br />
                          Phone: <%= addr.phone %><% if (addr.altPhone) { %> / <%= addr.altPhone %><% } %>
                        </div>
                      </label>
                      <% }) %>
                      <div class="add-address-btn">
                        <a href="/addAddresses?redirect=checkout"><i class="fi-rs-plus"></i> Add New Address</a>
                      </div>
                    </div>
                  </div>
                </div>
          
                <!-- Order Items Section -->
                <div class="checkout-section">
                  <div class="card">
                    <div class="card-header"><h4>Order Items</h4></div>
                    <div class="card-body checkout-products">
                      <% items.forEach(item => { %>
                      <div class="checkout-product" data-product-id="<%= item.productId._id %>" data-size="<%= item.variants.size %>" data-quantity="<%= item.quantity %>">
                        <img
                           src="<%= item.productImage %>" alt="<%= item.product?.productName || 'Product' %>"
                           class="checkout-product-image"
                        />
                        <div class="checkout-product-details">
                          <div class="checkout-product-name"><%= item.name %></div>
                          <div class="checkout-product-price">₹<%= item.price %></div>
                          <div class="stock-status" id="stock-status-<%= item.productId._id %>-<%= item.variants.size %>">
                            <span class="stock-indicator loading">Checking stock...</span>
                          </div>
                        </div>
                        <div class="checkout-product-quantity">Qty: <%= item.quantity %></div>
                        <div class="checkout-product-total">₹<%= (item.price * item.quantity).toFixed(2) %></div>
                      </div>
                      <% }) %>
                    </div>
                  </div>
                </div> 
                
                
          
               <!-- Payment Methods Section -->
                <div class="checkout-section">
                    <div class="card">
                        <div class="card-header">
                            <h4>Payment Method</h4>
                        </div>
                        <div class="card-body">
                            <div class="payment-methods">
                                <!-- Razorpay -->
                                <div class="payment-method">
                                    <div class="payment-method-icon">
                                        <i class="fi-rs-credit-card" style="font-size: 24px; color: #3BB77E;"></i>
                                    </div>
                                    <div class="payment-method-details">
                                        <div class="payment-method-name">Razorpay</div>
                                        <div class="payment-method-description">Pay securely with Razorpay</div>
                                    </div>
                                    <div class="payment-method-radio">
                                        <input type="radio" name="paymentMethod" value="razorpay" required>
                                    </div>
                                </div>
                                
                                <!-- Wallet -->
                                <div class="payment-method">
                                    <div class="payment-method-icon">
                                        <i class="fi-rs-wallet" style="font-size: 24px; color: #3BB77E;"></i>
                                    </div>
                                    <div class="payment-method-details">
                                        <div class="payment-method-name">Wallet</div>
                                        <div class="payment-method-description">
                                            Pay using Wallet
                                            <div class="wallet-balance" style="font-size: 12px; color: #666; margin-top: 2px;">
                                                Balance: ₹<span id="walletBalance">Loading...</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="payment-method-radio">
                                        <input type="radio" name="paymentMethod" value="wallet" required>
                                    </div>
                                </div>
                                
                                <!-- Cash on Delivery -->
                                <div class="payment-method selected">
                                    <div class="payment-method-icon">
                                      <i class="fi-rs-money" style="font-size: 24px; color: #3BB77E;"></i>
                                    </div>
                                    <div class="payment-method-details">
                                      <div class="payment-method-name">Cash on Delivery</div>
                                      <div class="payment-method-description">Pay with cash upon delivery</div>
                                    </div>
                                    <div class="payment-method-radio">
                                      <input type="radio" name="paymentMethod" value="cod" checked required />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
              </div>
          
              <!-- Order Summary -->
              <div class="col-lg-4 col-md-12">
                <% const subtotal = items.reduce((sum, i) => sum + i.price * i.quantity, 0); %>
                <% const shipping = 41; %>
                <% const tax = subtotal * 0.05; %>
                <% const totalAmount = (subtotal + shipping + tax).toFixed(2); %>
          
                <div class="card">
                  <div class="card-body checkout-summary">
                    <!--Coupon area-->
                    <div class="coupon-section">
                      <div class="coupon-input">
                        <%if(coupon){%>
                        <input type="text" id="couponCode" value="<%= coupon.code %>" />
                        <%}else{%>
                        <input type="text" id="couponCode" placeholder="Enter coupon code or click to select" />
                        <%}%>
                        <button type="button" id="applyCouponBtn">Apply</button>
                        <button type="button" id="selectCouponBtn" class="select-coupon-btn">Select Coupon</button>
                     </div>
                      <div class="coupon-dropdown" id="couponDropdown">
                        <!-- Available coupons will be loaded here -->
                      </div>
                      <div class="coupon-actions" id="couponActions" style="display: none;">
                        <button type="button" id="applySelectedCouponBtn" class="apply-selected-btn">Apply Selected Coupon</button>
                        <button type="button" id="clearSelectionBtn" class="clear-selection-btn">Clear Selection</button>
                      </div>
                      <div class="coupon-invalid" id="couponInvalid"></div>
                       <%if(coupon){%>
                      <div class="coupon-valid" id="couponValid" style="display: block;">
                        <div class="coupon-success-message">
                        <span>Coupon applied! You saved ₹<%=coupon.offerPrice.toFixed(2)%></span>
                        <button type="button" class="remove-coupon-btn" onclick="window.removeCouponDiscount()">Remove</button>
                        </div>
                        <!-- Remove coupon button will be added here dynamically -->
                      </div>
                       <%} else {%>
                         <div class="coupon-valid" id="couponValid">
                         </div>
                        <% } %>
                    </div>

                    <div class="checkout-summary-title">Order Summary</div>
                    <div class="checkout-summary-row">
                      <span>Subtotal</span>
                      <span id="orderSubtotal">₹<%= subtotal.toFixed(2) %></span>
                    </div>
                    <div class="checkout-summary-row">
                      <span>Shipping</span>
                      <span>₹<%= shipping.toFixed(2) %></span>
                    </div>
                    <div class="checkout-summary-row">
                      <span>Tax (5%)</span>
                      <span>₹<%= tax.toFixed(2) %></span>
                    </div>
                    <%if(coupon){%>
                       <div class="checkout-summary-row coupon-summary-row" id="couponDiscountRow">
                      <!--Coupon discount-->
                    <span>Coupon Discount</span>
                    <span id="couponDiscountAmount">-₹<%=coupon.offerPrice%></span>
                    </div>
                  <%}else{%>
                    <div class="checkout-summary-row coupon-summary-row" id="couponDiscountRow" style="display: none;">
                      <!--Coupon discount-->
                    <span>Coupon Discount</span>
                    <span id="couponDiscountAmount">-₹0.00</span>
                    </div>
                    <%}%>
                    <div class="checkout-summary-row">
                      <strong>Total</strong>
                      
                     <strong class="total-amount"><%=coupon ? totalAmount-coupon.offerPrice:totalAmount%></strong>
                    </div>
                    <button type="submit" class="btn place-order-btn mt-4" id="placeOrderBtn">Place Order</button>
                  </div>
                </div>
              </div>


            </div>
          
            <input type="hidden" id="totalAmount" name="totalAmount" value="<%= totalAmount %>" />
        </form>
    </div>
    </section>
</main>

<!-- Razorpay Checkout Script -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
document.addEventListener("DOMContentLoaded", () => {
  console.log('DOM Content Loaded');
  
  // Test if all required elements exist
  const applyBtn = document.getElementById('applyCouponBtn');
  const selectBtn = document.getElementById('selectCouponBtn');
  const couponCode = document.getElementById('couponCode');
  const couponDropdown = document.getElementById('couponDropdown');
  
  console.log('Apply button:', applyBtn);
  console.log('Select button:', selectBtn);
  console.log('Coupon code input:', couponCode);
  console.log('Coupon dropdown:', couponDropdown);
  
  let walletBalance = 0;
  
  // Load wallet balance
  async function loadWalletBalance() {
    try {
      const response = await fetch('/wallet-balance');
      const data = await response.json();
      if (data.success) {
        walletBalance = data.balance;
        document.getElementById('walletBalance').textContent = walletBalance.toFixed(2);
        
        // Update wallet payment method visibility based on balance
        const totalAmount = parseFloat(document.getElementById('totalAmount').value);
        const walletMethod = document.querySelector('input[value="wallet"]').closest('.payment-method');
        const walletBalanceElement = document.getElementById('walletBalance');
        
        if (walletBalance < totalAmount) {
          walletBalanceElement.style.color = '#dc3545';
          walletMethod.style.opacity = '0.6';
          walletMethod.title = 'Insufficient wallet balance';
        } else {
          walletBalanceElement.style.color = '#28a745';
          walletMethod.style.opacity = '1';
          walletMethod.title = '';
        }
      }
    } catch (error) {
      console.error('Error loading wallet balance:', error);
      document.getElementById('walletBalance').textContent = '0.00';
    }
  }

  // Load wallet balance on page load
  loadWalletBalance();

  // Check stock status for all items
  checkStockStatusForItems();

  // Function to check stock status for all items
  async function checkStockStatusForItems() {
    try {
      const stockResponse = await fetch('/check-stock');
      const stockData = await stockResponse.json();
      
      if (stockData.success) {
        updateStockIndicators(stockData);
      }
    } catch (error) {
      console.error('Error checking stock status:', error);
    }
  }

  // Function to update stock indicators
  function updateStockIndicators(stockData) {
    const productItems = document.querySelectorAll('.checkout-product');
    
    productItems.forEach(item => {
      const productId = item.dataset.productId;
      const size = item.dataset.size;
      const quantity = parseInt(item.dataset.quantity);
      const stockIndicator = item.querySelector('.stock-indicator');
      
      if (!stockIndicator) return;
      
      // Check if this item is out of stock
      const outOfStockItem = stockData.outOfStockItems?.find(
        stockItem => stockItem.productName === item.querySelector('.checkout-product-name').textContent
      );
      
      // Check if this item has insufficient stock
      const insufficientItem = stockData.insufficientStockItems?.find(
        stockItem => stockItem.productName === item.querySelector('.checkout-product-name').textContent
      );
      
      if (outOfStockItem) {
        stockIndicator.textContent = 'Out of Stock';
        stockIndicator.className = 'stock-indicator out-of-stock';
        item.style.opacity = '0.6';
      } else if (insufficientItem) {
        stockIndicator.textContent = `Only ${insufficientItem.availableStock} available`;
        stockIndicator.className = 'stock-indicator insufficient';
        item.style.opacity = '0.8';
      } else {
        stockIndicator.textContent = 'In Stock';
        stockIndicator.className = 'stock-indicator in-stock';
      }
    });
  }

  // Test backend routes
  async function testBackendRoutes() {
    console.log('Testing backend routes...');
    
    try {
      // Test available coupons route
      const couponsResponse = await fetch('/available-coupons');
      console.log('Available coupons response status:', couponsResponse.status);
      const couponsData = await couponsResponse.json();
      console.log('Available coupons data:', couponsData);
      
      // Test apply coupon route with a dummy request
      const applyResponse = await fetch('/apply-coupon', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ couponCode: 'TEST123', subtotal: 1000 })
      });
      console.log('Apply coupon response status:', applyResponse.status);
      const applyData = await applyResponse.json();
      console.log('Apply coupon data:', applyData);
      
    } catch (error) {
      console.error('Error testing backend routes:', error);
    }
  }

  // Test backend routes on page load
  testBackendRoutes();

  // Temporary function to create test coupons (remove this in production)
  async function createTestCoupons() {
  
    try {
      const testCoupons = [
        {
          name: 'WELCOME10',
          code: 'WELCOME10',
          description: 'Get 10% off on your first order',
          startDate: new Date(),
          expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
          minPrice: 500,
          offerPrice: 100,
          usageType: 'multi-use',
          status: 'Active'
        },
        {
          name: 'SAVE50',
          code: 'SAVE50',
          description: 'Save ₹50 on orders above ₹1000',
          startDate: new Date(),
          expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
          minPrice: 1000,
          offerPrice: 50,
          usageType: 'multi-use',
          status: 'Active'
        }
      ];

      for (const coupon of testCoupons) {
        const response = await fetch('/admin/coupons', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(coupon)
        });
        console.log(`Created coupon ${coupon.code}:`, response.status);
      }
    } catch (error) {
      console.error('Error creating test coupons:', error);
    }
  }

  // Uncomment the line below to create test coupons (remove in production)
  // createTestCoupons();

  // Coupon functionality
let appliedCoupon = null;
let couponDiscount = 0;

// Load available coupons
async function loadAvailableCoupons() {
  try {
    const response = await fetch('/available-coupons');
    const data = await response.json();
    console.log('Coupons response:', data);
    if (data.success) {
      console.log('Coupons loaded:', data.coupons);
      displayCoupons(data.coupons);
    } else {
      console.log('Failed to load coupons:', data.message);
    }
  } catch (error) {
    console.error('Error loading coupons:', error);
  }
}

function displayCoupons(coupons) {
  console.log('Displaying coupons:', coupons);
  const dropdown = document.getElementById('couponDropdown');
  console.log('Dropdown element:', dropdown);
  dropdown.innerHTML = '';
  
  if (coupons.length === 0) {
    console.log('No coupons available');
    dropdown.innerHTML = `
      <div class="coupon-item no-coupons">
        <div class="coupon-empty-state">
          <i class="fi-rs-tag" style="font-size: 2rem; color: #ccc; margin-bottom: 0.5rem;"></i>
          <p>No coupons available at the moment</p>
          <small>Check back later for exciting offers!</small>
        </div>
      </div>`;
    return;
  }
  
  // Sort coupons by discount amount (highest first)
  coupons.sort((a, b) => b.offerPrice - a.offerPrice);
  
  coupons.forEach(coupon => {
    console.log('Creating coupon item for:', coupon);
    const couponItem = document.createElement('div');
    couponItem.className = 'coupon-item';
    
    // Determine usage type badge
    const usageTypeBadge = coupon.usageType === 'single-use' 
      ? '<span class="usage-badge single-use">Single Use</span>'
      : '<span class="usage-badge multi-use">Multi Use</span>';
    
    // Calculate savings percentage
    const savingsPercentage = Math.round((coupon.offerPrice / coupon.minPrice) * 100);
    
    couponItem.innerHTML = `
      <div class="coupon-header">
        <div class="coupon-info">
          <div class="coupon-main-info">
            <span class="coupon-code">${coupon.code}</span>
            <div class="coupon-discount-info">
              <span class="coupon-discount">₹${coupon.offerPrice} OFF</span>
              <span class="savings-percentage">(${savingsPercentage}% savings)</span>
            </div>
          </div>
          ${usageTypeBadge}
        </div>
        <div class="coupon-selection">
          <input type="radio" name="selectedCoupon" value="${coupon.code}" id="coupon_${coupon.code}">
          <label for="coupon_${coupon.code}" class="select-label">Select</label>
        </div>
      </div>
      <div class="coupon-description">${coupon.description || 'Get amazing discount on your purchase!'}</div>
      <div class="coupon-terms">
        <div class="term-item">
          <i class="fi-rs-info"></i>
          <span>Min. order: ₹${coupon.minPrice}</span>
        </div>
        <div class="term-item">
          <i class="fi-rs-calendar"></i>
          <span>Valid till: ${new Date(coupon.expiryDate).toLocaleDateString()}</span>
        </div>
        <div class="term-item">
          <i class="fi-rs-user"></i>
          <span>${coupon.usageType === 'single-use' ? 'One-time use per customer' : 'Can be used multiple times'}</span>
        </div>
      </div>
    `;
    
    // Add click event to the radio button
    const radioButton = couponItem.querySelector(`input[value="${coupon.code}"]`);
    radioButton.addEventListener('change', () => {
      console.log('Coupon selected:', coupon.code);
      document.getElementById('couponCode').value = coupon.code;
      
      // Update visual selection
      document.querySelectorAll('.coupon-item').forEach(item => {
        item.classList.remove('selected');
      });
      couponItem.classList.add('selected');
      
      // Show action buttons
      document.getElementById('couponActions').style.display = 'flex';
    });
    
    // Add click event to the entire coupon item for better UX
    couponItem.addEventListener('click', (e) => {
      // Don't trigger if clicking on the radio button itself
      if (e.target.type === 'radio' || e.target.tagName === 'LABEL') {
        return;
      }
      
      // Uncheck all other radio buttons
      document.querySelectorAll('input[name="selectedCoupon"]').forEach(radio => {
        radio.checked = false;
      });
      
      // Check this radio button
      radioButton.checked = true;
      
      console.log('Coupon selected:', coupon.code);
      document.getElementById('couponCode').value = coupon.code;
      
      // Update visual selection
      document.querySelectorAll('.coupon-item').forEach(item => {
        item.classList.remove('selected');
      });
      couponItem.classList.add('selected');
      
      // Show action buttons
      document.getElementById('couponActions').style.display = 'flex';
    });
    
    dropdown.appendChild(couponItem);
  });
  console.log('Coupons displayed in dropdown');
}

// Enhanced apply coupon function with better user feedback
async function applyCoupon() {
  console.log('Applying coupon...');
  const couponCode = document.getElementById('couponCode').value.trim();
  console.log('Coupon code:', couponCode);
  
  if (!couponCode) {
    showCouponError('Please enter a coupon code');
    return;
  }

  try {
    // Show loading state
    const applyBtn = document.getElementById('applyCouponBtn');
    const originalText = applyBtn.textContent;
    applyBtn.textContent = 'Applying...';
    applyBtn.disabled = true;

    // Get subtotal from the order summary using the specific ID
    const subtotalElement = document.getElementById('orderSubtotal');
    if (!subtotalElement) {
      console.error('Could not find subtotal element');
      showCouponError('Error: Could not find order subtotal. Please refresh the page and try again.');
      return;
    }
    
    const subtotalText = subtotalElement.textContent;
    console.log('Subtotal text:', subtotalText);
    
    // Extract the number from the text (remove ₹ symbol)
    const subtotal = parseFloat(subtotalText.replace('₹', ''));
    console.log('Subtotal:', subtotal);
    
    if (isNaN(subtotal)) {
      console.error('Invalid subtotal value:', subtotalText);
      showCouponError('Error: Invalid order subtotal. Please refresh the page and try again.');
      return;
    }
    
    const response = await fetch('/apply-coupon', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ couponCode, subtotal })
    });

    const data = await response.json();
    console.log('Response:', data);
    
    if (data.success) {
      appliedCoupon = data.coupon;
      couponDiscount = data.discount;
      
      // Enhanced success message with coupon details
      const usageInfo = data.coupon.usageType === 'single-use' 
        ? 'One-time use per customer' 
        : 'Can be used multiple times';
      
      document.getElementById('couponValid').innerHTML = `
        <div class="coupon-success-message">
          <div class="success-content">
            <div class="success-header">
              <i class="fi-rs-check-circle" style="color: #28a745; margin-right: 0.5rem;"></i>
              <span class="success-title">Coupon Applied Successfully!</span>
            </div>
            <div class="success-details">
              <div class="coupon-applied-info">
                <strong>${data.coupon.code}</strong> - ${data.coupon.name || 'Discount Applied'}
              </div>
              <div class="savings-info">
                You saved: <strong>₹${couponDiscount.toFixed(2)}</strong>
              </div>
              <div class="usage-info">
                <small>${usageInfo}</small>
              </div>
            </div>
          </div>
          <button type="button" class="remove-coupon-btn" onclick="window.removeCouponDiscount()">
            <i class="fi-rs-cross"></i> Remove
          </button>
        </div>
      `;
      document.getElementById('couponValid').style.display = 'block';
      document.getElementById('couponInvalid').style.display = 'none';
      
      // Clear the input field
      document.getElementById('couponCode').value = '';
      
      // Hide dropdown if open
      document.getElementById('couponDropdown').classList.remove('active');
      document.getElementById('couponActions').style.display = 'none';
      
      updateOrderSummary();
      
      // Show success toast
      showCouponSuccess(data.message || 'Coupon applied successfully!');
      
    } else {
      showCouponError(data.message || 'Failed to apply coupon');
    }
  } catch (error) {
    console.error('Error applying coupon:', error);
    showCouponError('Error applying coupon. Please try again.');
  } finally {
    // Restore button state
    const applyBtn = document.getElementById('applyCouponBtn');
    applyBtn.textContent = 'Apply';
    applyBtn.disabled = false;
  }
}

// Helper function to show coupon error
function showCouponError(message) {
  document.getElementById('couponInvalid').textContent = message;
  document.getElementById('couponInvalid').style.display = 'block';
  document.getElementById('couponValid').style.display = 'none';
}

// Helper function to show coupon success toast
function showCouponSuccess(message) {
  // Create a simple toast notification
  const toast = document.createElement('div');
  toast.className = 'coupon-toast success';
  toast.innerHTML = `
    <i class="fi-rs-check-circle"></i>
    <span>${message}</span>
  `;
  document.body.appendChild(toast);
  
  // Remove toast after 3 seconds
  setTimeout(() => {
    if (toast.parentNode) {
      toast.parentNode.removeChild(toast);
    }
  }, 3000);
}

function updateOrderSummary() {
  console.log('Updating order summary...');
  console.log('Coupon discount:', couponDiscount);
  
  const discountRow = document.getElementById('couponDiscountRow');
  const discountAmount = document.getElementById('couponDiscountAmount');
  const totalRow = document.querySelector('.total-amount');
  const totalAmountInput = document.getElementById('totalAmount');
  
  if (couponDiscount > 0) {
    console.log('Applying coupon discount...');
    discountRow.style.display = 'flex';
    discountAmount.textContent = `-₹${couponDiscount.toFixed(2)}`;
    
    // Get the original total (subtotal + shipping + tax)
    const subtotalElement = document.getElementById('orderSubtotal');
    if (!subtotalElement) {
      console.error('Could not find subtotal element in updateOrderSummary');
      return;
    }
    
    const subtotal = parseFloat(subtotalElement.textContent.replace('₹', ''));
    const shipping = 41;
    const tax = subtotal * 0.05;
    const originalTotal = subtotal + shipping + tax;
    
    // Calculate new total with discount
    const newTotal = Number((originalTotal - couponDiscount).toFixed(2));
    
    console.log('Subtotal:', subtotal, 'Shipping:', shipping, 'Tax:', tax);
    console.log('Original total:', originalTotal, 'New total:', newTotal);
    
    // Update the displayed total
    document.querySelector('.total-amount').innerHTML = `₹${newTotal}`;
    
    // Update the hidden totalAmount input field for payment processing
    totalAmountInput.value = newTotal.toFixed(2);
    
    // Re-check COD eligibility and wallet balance with new total
    checkCODEligibility();
    updateWalletPaymentMethod(newTotal);
  } else {
    console.log('No coupon discount to apply');
    // If no coupon discount, hide the discount row
    discountRow.style.display = 'none';
  }
}

// Function to remove coupon discount
function removeCouponDiscount() {
  console.log('Removing coupon discount...');
  const discountRow = document.getElementById('couponDiscountRow');
  const totalAmountInput = document.getElementById('totalAmount');
  
  // Get the original total (subtotal + shipping + tax)
  const subtotalElement = document.getElementById('orderSubtotal');
  if (!subtotalElement) {
    console.error('Could not find subtotal element in removeCouponDiscount');
    return;
  }
  
  const subtotal = parseFloat(subtotalElement.textContent.replace('₹', ''));
  const shipping = 41;
  const tax = subtotal * 0.05;
  const originalTotal = subtotal + shipping + tax;
  
  console.log('Original total:', originalTotal);
  
  // Update the displayed total
  document.querySelector('.total-amount').innerHTML = `₹${originalTotal.toFixed(2)}`;
  
  // Update the hidden totalAmount input field
  totalAmountInput.value = originalTotal.toFixed(2);
  
  // Hide discount row
  discountRow.style.display = 'none';
  
  // Re-check COD eligibility and wallet balance
  checkCODEligibility();
  updateWalletPaymentMethod(originalTotal);
  
  // Clear coupon fields
  document.getElementById('couponCode').value = '';
  document.getElementById('couponValid').style.display = 'none';
  document.getElementById('couponInvalid').style.display = 'none';
  
  // Clear selection state
  document.querySelectorAll('input[name="selectedCoupon"]').forEach(radio => {
    radio.checked = false;
  });
  
  document.querySelectorAll('.coupon-item').forEach(item => {
    item.classList.remove('selected');
  });
  
  document.getElementById('couponActions').style.display = 'none';
  
  // Reset coupon variables
  appliedCoupon = null;
  couponDiscount = 0;
  
  console.log('Coupon discount removed successfully');
}

// Make removeCouponDiscount globally accessible
window.removeCouponDiscount = removeCouponDiscount;

// Add a function to update wallet payment method visibility
function updateWalletPaymentMethod(newTotal) {
  const walletMethod = document.querySelector('input[value="wallet"]').closest('.payment-method');
  const walletBalanceElement = document.getElementById('walletBalance');
  
  if (walletBalance < newTotal) {
    walletBalanceElement.style.color = '#dc3545';
    walletMethod.style.opacity = '0.6';
    walletMethod.title = 'Insufficient wallet balance';
  } else {
    walletBalanceElement.style.color = '#28a745';
    walletMethod.style.opacity = '1';
    walletMethod.title = '';
  }
}

// Event listeners for coupon functionality
document.getElementById('applyCouponBtn').addEventListener('click', applyCoupon);
document.getElementById('selectCouponBtn').addEventListener('click', () => {
  console.log('Select coupon button clicked');
  const dropdown = document.getElementById('couponDropdown');
  console.log('Dropdown element:', dropdown);
  dropdown.classList.toggle('active');
  console.log('Dropdown active:', dropdown.classList.contains('active'));
  if (dropdown.classList.contains('active')) {
    document.getElementById('couponCode').focus();
  }
});
document.getElementById('couponCode').addEventListener('focus', () => {
  document.getElementById('couponDropdown').classList.add('active');
});
document.getElementById('couponCode').addEventListener('blur', (e) => {
  setTimeout(() => {
    document.getElementById('couponDropdown').classList.remove('active');
  }, 200);
});

// Close dropdown when clicking outside
document.addEventListener('click', (e) => {
  const dropdown = document.getElementById('couponDropdown');
  const couponSection = document.querySelector('.coupon-section');
  
  if (!couponSection.contains(e.target) && dropdown.classList.contains('active')) {
    dropdown.classList.remove('active');
  }
});

// Load coupons on page load
loadAvailableCoupons();

  // Address card selection
  const addressCards = document.querySelectorAll('.address-card');
  addressCards.forEach(card => {
    card.addEventListener('click', () => {
      addressCards.forEach(c => {
        c.classList.remove('selected');
        c.querySelector('input[type="radio"]').checked = false;
      });
      card.classList.add('selected');
      card.querySelector('input[type="radio"]').checked = true;
    });
  });

  // Payment method selection
  const paymentMethods = document.querySelectorAll('.payment-method');
  paymentMethods.forEach(method => {
    method.addEventListener('click', () => {
      const paymentValue = method.querySelector('input[type="radio"]').value;
      
      // Check wallet balance for wallet payment
      if (paymentValue === 'wallet') {
        const totalAmount = parseFloat(document.getElementById('totalAmount').value);
        if (walletBalance < totalAmount) {
          // Redirect to order failure page instead of showing alert
          window.location.href = '/order-failure';
          return;
        }
      }
      
      paymentMethods.forEach(m => {
        m.classList.remove('selected');
        m.querySelector('input[type="radio"]').checked = false;
      });
      method.classList.add('selected');
      method.querySelector('input[type="radio"]').checked = true;
    });
  });

  // Handle form submission
  document.getElementById('checkoutForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const paymentMethodElement = document.querySelector('input[name="paymentMethod"]:checked');
    const selectedAddressElement = document.querySelector('input[name="selectedAddress"]:checked');
    
    if (!paymentMethodElement) {
      // Redirect to order failure page instead of showing alert
      window.location.href = '/order-failure';
      return;
    }
    
    if (!selectedAddressElement) {
      // Redirect to order failure page instead of showing alert
      window.location.href = '/order-failure';
      return;
    }

    const paymentMethod = paymentMethodElement.value;
    const selectedAddress = selectedAddressElement.value;

    // Check stock availability before proceeding
    try {
      const stockResponse = await fetch('/check-stock');
      const stockData = await stockResponse.json();
      
      if (!stockData.success) {
        console.error('Error checking stock:', stockData.message);
        window.location.href = '/order-failure';
        return;
      }
      
      if (!stockData.isValid) {
        // Show stock issues to user
        let stockMessage = 'Some items in your cart have stock issues:\n\n';
        
        if (stockData.outOfStockItems && stockData.outOfStockItems.length > 0) {
          stockMessage += 'Out of Stock Items:\n';
          stockData.outOfStockItems.forEach(item => {
            stockMessage += `• ${item.productName} (Size: ${item.size}) - ${item.reason}\n`;
          });
          stockMessage += '\n';
        }
        
        if (stockData.insufficientStockItems && stockData.insufficientStockItems.length > 0) {
          stockMessage += 'Insufficient Stock Items:\n';
          stockData.insufficientStockItems.forEach(item => {
            stockMessage += `• ${item.productName} (Size: ${item.size}) - ${item.reason}\n`;
          });
        }
        
        stockMessage += '\nPlease update your cart and try again.';
        
        if (confirm(stockMessage + '\n\nDo you want to continue with the order anyway?')) {
          // User wants to proceed despite stock issues
          console.log('User chose to proceed despite stock issues');
        } else {
          // User cancelled, redirect to cart
          window.location.href = '/cart';
          return;
        }
      }
    } catch (error) {
      console.error('Error checking stock availability:', error);
      // Continue with order if stock check fails
    }

    // Additional wallet balance check before processing
    if (paymentMethod === 'wallet') {
      const totalAmount = parseFloat(document.getElementById('totalAmount').value);
      if (walletBalance < totalAmount) {
        // Redirect to order failure page instead of showing alert
        window.location.href = '/order-failure';
        return;
      }
    }

    if (paymentMethod === 'razorpay') {
      // Additional validation for Razorpay payment
      const totalAmount = parseFloat(document.getElementById('totalAmount').value);
      if (isNaN(totalAmount) || totalAmount <= 0) {
        console.error('Invalid total amount for payment');
        window.location.href = '/order-failure';
        return;
      }

      // Check if cart has items
      const cartItems = document.querySelectorAll('.checkout-product');
      if (cartItems.length === 0) {
        console.error('No items in cart for payment');
        window.location.href = '/order-failure';
        return;
      }

      await initiateRazorpayPayment(selectedAddress);
    } else {
      await processOrder(paymentMethod, selectedAddress);
    }
  });

  // Razorpay Payment Function
  async function initiateRazorpayPayment(selectedAddress) {
    try {
      // Validate required data before creating order
      if (!selectedAddress) {
        console.error('No address selected for Razorpay payment');
        window.location.href = '/order-failure';
        return;
      }

      const totalAmount = parseFloat(document.getElementById('totalAmount').value);
      if (isNaN(totalAmount) || totalAmount <= 0) {
        console.error('Invalid total amount for Razorpay payment');
        window.location.href = '/order-failure';
        return;
      }

      // Create Razorpay order with coupon discount
      const orderResponse = await fetch('/create-razorpay-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          couponDiscount: couponDiscount,
          appliedCoupon: appliedCoupon ? appliedCoupon._id : null
        })
      });

      if (!orderResponse.ok) {
        console.error('Network error creating Razorpay order');
        window.location.href = '/order-failure';
        return;
      }

      const orderData = await orderResponse.json();
      
      if (!orderData.success) {
        console.error('Failed to create Razorpay order:', orderData.message);
        // Redirect to order failure page instead of showing alert
        window.location.href = '/order-failure';
        return;
      }

      // Validate order data
      if (!orderData.key || !orderData.orderId || !orderData.amount) {
        console.error('Invalid Razorpay order data received');
        window.location.href = '/order-failure';
        return;
      }

      // Check if Razorpay script is loaded
      if (typeof Razorpay === 'undefined') {
        console.error('Razorpay script not loaded');
        window.location.href = '/order-failure';
        return;
      }

      // Razorpay options
      const options = {
        key: orderData.key,
        amount: orderData.amount,
        currency: orderData.currency,
        name: "Shoestore",
        description: "Order Payment",
        order_id: orderData.orderId,
        handler: async function(response) {
          try {
            // Payment successful
            await processOrder('razorpay', selectedAddress, {
              razorpay_payment_id: response.razorpay_payment_id,
              razorpay_order_id: response.razorpay_order_id,
              razorpay_signature: response.razorpay_signature
            });
          } catch (error) {
            console.error('Error processing successful payment:', error);
            window.location.href = '/order-failure';
          }
        },
        prefill: {
        
  name: "<%= (user && user.name) ? user.name : '' %>",
  email: "<%= (user && user.email) ? user.email : '' %>",
  contact: "<%= (user && user.phone) ? user.phone : '' %>"
        },
        theme: {
          color: "#3BB77E"
        },
        modal: {
          ondismiss: function() {
            console.log('Payment modal closed');
            // Redirect to order failure page when user dismisses the payment modal
            window.location.href = '/order-failure';
          }
        }
      };

      const rzp = new Razorpay(options);
      
      // Add error handling for Razorpay instance
      rzp.on('payment.failed', function (response) {
        console.error('Razorpay payment failed:', response.error);
        window.location.href = '/order-failure';
      });

      rzp.open();

    } catch (error) {
      console.error('Error initiating Razorpay payment:', error);
      // Redirect to order failure page on error instead of showing alert
      window.location.href = '/order-failure';
    }
  }

  // Process Order Function
  async function processOrder(paymentMethod, selectedAddress, paymentData = {}) {
    try {
      // const formData = {
      //   paymentMethod,
      //   selectedAddress,
      //   ...paymentData
      // };

const formData = {
  paymentMethod,
  selectedAddress,
  appliedCoupon: appliedCoupon ? appliedCoupon._id : null,
  couponDiscount: couponDiscount,
  totalAmount: document.getElementById('totalAmount').value, // Ensure updated total is sent
  ...paymentData
};

      // Show loading state
      const placeOrderBtn = document.getElementById('placeOrderBtn');
      const originalText = placeOrderBtn.textContent;
      placeOrderBtn.textContent = 'Processing...';
      placeOrderBtn.disabled = true;

      const response = await fetch('/checkout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      const data = await response.json();

      if (data.success) {
        window.location.href = '/order-success';
      } else {
        // Handle payment failure for all payment methods
        console.log('Payment failed:', data.message);
        // Redirect to order failure page for payment failures
        if (data.orderId) {
          window.location.href = `/order-failure/${data.orderId}`;
        } else {
          window.location.href = '/order-failure';
        }
      }
      
      // Restore button state
      placeOrderBtn.textContent = originalText;
      placeOrderBtn.disabled = false;
      
    } catch (error) {
      console.error('Error processing order:', error);
      
      // Handle network errors or other issues for all payment methods
      window.location.href = '/order-failure';
      
      // Restore button state
      const placeOrderBtn = document.getElementById('placeOrderBtn');
      placeOrderBtn.textContent = 'Place Order';
      placeOrderBtn.disabled = false;
    }
  }

  function checkCODEligibility() {
    const totalAmount = parseFloat(document.getElementById('totalAmount').value);
    const codMethod = document.querySelector('input[value="cod"]').closest('.payment-method');
    const codDescription = codMethod.querySelector('.payment-method-description');
    
    if (totalAmount > 1000) {
      codMethod.style.opacity = '0.6';
      codMethod.style.pointerEvents = 'none';
      codDescription.textContent = 'COD not available for orders above ₹1000';
      codDescription.style.color = '#dc3545';
      
      // If COD is currently selected, deselect it
      const codRadio = codMethod.querySelector('input[type="radio"]');
      if (codRadio.checked) {
        codRadio.checked = false;
        codMethod.classList.remove('selected');
      }
    } else {
      codMethod.style.opacity = '1';
      codMethod.style.pointerEvents = 'auto';
      codDescription.textContent = 'Pay with cash upon delivery';
      codDescription.style.color = '';
    }
  }
  checkCODEligibility()
});

// Apply selected coupon button
const applySelectedBtn = document.getElementById('applySelectedCouponBtn');
if (applySelectedBtn) {
  applySelectedBtn.addEventListener('click', () => {
    console.log('Apply selected coupon button clicked');
    
    const selectedCoupon = document.querySelector('input[name="selectedCoupon"]:checked');
    if (selectedCoupon) {
      console.log('Selected coupon:', selectedCoupon.value);
      document.getElementById('couponCode').value = selectedCoupon.value;
      
      // Apply the coupon
      applyCoupon();
      
      // Hide dropdown and action buttons after applying
      document.getElementById('couponDropdown').classList.remove('active');
      document.getElementById('couponActions').style.display = 'none';
    } else {
      console.log('No coupon selected');
      showCouponError('Please select a coupon first');
    }
  });
} else {
  console.error('Apply Selected Coupon button not found');
}

// Clear selection button
const clearSelectionBtn = document.getElementById('clearSelectionBtn');
if (clearSelectionBtn) {
  clearSelectionBtn.addEventListener('click', () => {
    console.log('Clear selection button clicked');
    
    // Uncheck all radio buttons
    document.querySelectorAll('input[name="selectedCoupon"]').forEach(radio => {
      radio.checked = false;
    });
    
    // Remove visual selection from all coupon items
    document.querySelectorAll('.coupon-item').forEach(item => {
      item.classList.remove('selected');
    });
    
    // Clear coupon code input
    document.getElementById('couponCode').value = '';
    
    // Hide action buttons
    document.getElementById('couponActions').style.display = 'none';
    
    // Hide dropdown if it's open
    document.getElementById('couponDropdown').classList.remove('active');
    
    // Clear any error or success messages
    document.getElementById('couponInvalid').style.display = 'none';
    document.getElementById('couponValid').style.display = 'none';
    
    // Reset coupon variables
    appliedCoupon = null;
    couponDiscount = 0;
    
    // Update order summary to remove any applied discount
    updateOrderSummary();
    
    // Show feedback to user
    showCouponSuccess('Selection cleared successfully');
    
    console.log('Selection cleared successfully');
  });
} else {
  console.error('Clear Selection button not found');
}
</script> 
<%- include('../partials/admin/header.ejs') %>
<style>
    .wrapper {
        display: flex;
        width: 100%;
        align-items: stretch;
        overflow-x: hidden;
    }

    .main-wrap {
        width: 100%;
        overflow-x: hidden;
    }

    .sidebar-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0,0,0,0.3);
        z-index: 1029;
        opacity: 0;
        transition: opacity 0.3s;
    }
    .sidebar-overlay.active {
        display: block;
        opacity: 1;
    }

    .navbar-aside {
        width: 250px;
        height: 100vh;
        position: fixed;
        overflow-y: auto;
        z-index: 1030;
        background: #fff;
        transition: transform 0.3s ease-in-out;
        left: 0;
        top: 0;
    }
    @media (max-width: 991px) {
        .navbar-aside {
            transform: translateX(-100%) !important;
        }
        .navbar-aside.show {
            transform: translateX(0) !important;
        }
        .sidebar-overlay {
            display: block;
        }
        .main-wrap {
            margin-left: 0;
            width: 100%;
        }
    }
    @media (min-width: 992px) {
        .sidebar-overlay {
            display: none !important;
        }
        .navbar-aside {
            transform: none !important;
        }
    }

    .chart-container {
        position: relative;
        margin: auto;
    }

    .top-products-container {
        max-height: 300px;
        overflow-y: auto;
    }

    .card {
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        transition: all 0.3s cubic-bezier(.25,.8,.25,1);
        margin-bottom: 1rem;
    }

    .card:hover {
        box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
    }

    .navbar-aside {
        width: 250px;
        height: 100vh;
        position: fixed;
        overflow-y: auto;
        z-index: 1030;
        background: #fff;
        transition: transform 0.3s ease-in-out;
    }

    .progress {
        overflow: hidden;
    }

    canvas {
        max-width: 100%;
    }

    .global-filter-btn.active {
        background-color: #5a6268;
        color: white;
    }

    /* Add these styles to your existing style section */
.date-range-container {
    animation: slideDown 0.3s ease-out;
}

@keyframes slideDown {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.filter-controls {
    gap: 1rem;
}

@media (max-width: 768px) {
    .filter-controls {
        width: 100%;
        justify-content: center;
    }
    
    .filter-controls .btn-group {
        width: 100%;
        margin-bottom: 1rem;
    }
    
    .filter-controls .btn-group .btn {
        flex: 1;
        font-size: 0.8rem;
    }
    
    .date-range-container {
        width: 100%;
    }
    
    .date-range-container .d-flex {
        justify-content: center;
        flex-wrap: wrap;
        gap: 0.5rem;
    }
    
    .date-range-container input {
        flex: 1;
        min-width: 120px;
    }
}

.global-filter-btn.active {
    background-color: #0d6efd;
    border-color: #0d6efd;
    color: white;
}

.spinner-border-sm {
    width: 1rem;
    height: 1rem;
}

    /* Mobile and Tablet Responsive Styles */
    @media (max-width: 991px) {
        .navbar-aside {
            transform: translateX(-100%) !important;
            width: 250px;
            height: 100vh;
            position: fixed;
            top: 0;
            left: 0;
            background: #fff;
            transition: transform 0.3s ease-in-out;
            z-index: 1030;
        }

        .navbar-aside.show {
            transform: translateX(0) !important;
        }

        body.sidebar-open {
            overflow: hidden;
        }

        .main-wrap {
            margin-left: 0;
            width: 100%;
        }

        .main-header.navbar .col-nav #mobile-menu-toggle {
            display: block !important;
            visibility: visible !important;
            opacity: 1 !important;
            z-index: 1050 !important;
        }

        .main-header.navbar .col-nav {
            display: flex !important;
            visibility: visible !important;
            opacity: 1 !important;
        }

        .main-header.navbar {
            display: flex !important;
            visibility: visible !important;
            opacity: 1 !important;
        }

        .col-search {
            flex-grow: 1;
        }

        .content-main {
            padding: 1rem;
        }

        .row {
            flex-direction: column;
        }

        .col-lg-3, .col-xl-8, .col-xl-4, .col-lg-12 {
            width: 100%;
            max-width: 100%;
        }

        .chart-container {
            height: 250px !important;
            min-height: 250px !important;
        }

        .top-products-container {
            max-height: 200px;
        }

        .table-responsive {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

        .table {
            width: 100%;
            min-width: 600px;
        }

        .btn-group {
            flex-wrap: wrap;
        }

        .btn-group .btn {
            margin-bottom: 0.5rem;
        }

        .content-header h2 {
            font-size: 1.5rem;
        }

        .content-header p {
            font-size: 0.9rem;
        }

        .icontext .icon {
            width: 2rem;
            height: 2rem;
        }

        .icontext .text h6 {
            font-size: 1rem;
        }

        .icontext .text span {
            font-size: 0.9rem;
        }
    }

    @media (max-width: 767px) {
        .navbar-aside {
            width: 200px;
        }

        .content-main {
            padding: 0.5rem;
        }

        .chart-container {
            height: 200px !important;
            min-height: 200px !important;
        }

        .card-title {
            font-size: 1.1rem;
        }

        .btn-group .btn {
            font-size: 0.8rem;
            padding: 0.3rem 0.5rem;
        }

        .input-group input.form-control {
            font-size: 0.9rem;
        }

        .dropdown-menu {
            font-size: 0.9rem;
        }

        .progress-bar {
            font-size: 0.8rem;
        }

        .top-products-container .font-xs {
            font-size: 0.8rem;
        }
    }
   @media (max-width: 991px) {
  #offcanvas_aside {
    transform: translateX(-100%) !important;
    transition: transform 0.3s ease-in-out !important;
  }

  #offcanvas_aside.show {
    transform: translateX(0%) !important;
  }

  body.sidebar-open {
    overflow: hidden;
  }
}
</style>
<body>
    <!-- Mobile Header with Logo and Hamburger -->
    <div class="mobile-header">
        <div class="mobile-logo">
            <img src="/assets/imgs/theme/shoestore-logo.svg" alt="Shoestore">
        </div>
        <button class="hamburger-btn" id="sidebarHamburger" aria-label="Toggle sidebar" aria-controls="offcanvas_aside" aria-expanded="false">
            <span class="bar"></span>
            <span class="bar"></span>
            <span class="bar"></span>
        </button>
    </div>
    <!-- Overlay -->
    <div class="screen-overlay" id="sidebarOverlay"></div>
    <!-- Sidebar -->
    <aside class="navbar-aside" id="offcanvas_aside" aria-label="Sidebar" aria-modal="true" role="dialog">
        <div class="aside-top">
            <a href="/admin" class="brand-wrap">
                <img src="/assets/imgs/theme/shoestore-logo.svg" class="logo" alt="Shoestore">
            </a>
        </div>
        <nav>
            <ul class="menu-aside">
                <li class="menu-item active">
                    <a class="menu-link" href="/admin/dashboard"> <i class="icon material-icons md-home"></i>
                        <span class="text">Dashboard</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/users"> <i class="icon material-icons md-person"></i>
                        <span class="text">Customers</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/products"> <i class="icon material-icons md-shopping_bag"></i>
                        <span class="text">Products</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/orders"> <i class="icon material-icons md-shopping_cart"></i>
                        <span class="text">Orders</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/category"> <i class="icon material-icons md-store"></i>
                        <span class="text">Category</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/coupons"> <i class="icon material-icons md-local_offer"></i>
                        <span class="text">Coupons</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/sales"> <i class="icon material-icons md-assessment"></i>
                        <span class="text">Sales Report</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/logout"> <i class="icon material-icons md-exit_to_app"></i>
                        <span class="text">Sign Out</span>
                    </a>
                </li>
            </ul>
            <hr>
        </nav>
    </aside>
    <main class="main-wrap" id="mainWrap">
        <header class="main-header navbar" style="display: flex !important; visibility: visible !important;">
            <div class="col-search">

            </div>
            <div class="col-nav" style="display: flex !important; visibility: visible !important;">
                <!-- Mobile menu button for <992px -->
                <button class="btn btn-icon btn-aside-minimize d-lg-none" id="mobile-menu-toggle-header" aria-label="Open sidebar" aria-controls="offcanvas_aside" aria-expanded="false">
                    <i class="material-icons md-menu_open"></i>
                </button>
            </div>
        </header>

        <section class="content-main">
            <div class="content-header">
                <div>
                    <h2 class="content-title card-title">Dashboard</h2>
                    <p>Whole data about your business here</p>
                </div>
            </div>
            
            <!-- Global Filters -->
<div class="card mb-4">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center flex-wrap">
            <h5 class="card-title mb-2">Filter Options</h5>
            <div class="filter-controls d-flex flex-wrap align-items-center gap-3">
                <!-- Time Period Buttons -->
                <div class="btn-group" role="group" aria-label="Time Filter">
                    <button type="button" class="btn btn-sm btn-outline-secondary active global-filter-btn" data-filter="weekly">Weekly</button>
                    <button type="button" class="btn btn-sm btn-outline-secondary global-filter-btn" data-filter="monthly">Monthly</button>
                    <button type="button" class="btn btn-sm btn-outline-secondary global-filter-btn" data-filter="yearly">Yearly</button>
                    <button type="button" class="btn btn-sm btn-outline-secondary global-filter-btn" data-filter="custom">Custom Range</button>
                </div>
                
                <!-- Date Range Inputs (initially hidden) -->
                <div id="dateRangeContainer" class="date-range-container d-none">
                    <div class="d-flex align-items-center gap-2 flex-wrap">
                        <input type="date" id="startDate" class="form-control form-control-sm" style="width: auto;">
                        <span class="text-muted">to</span>
                        <input type="date" id="endDate" class="form-control form-control-sm" style="width: auto;">
                        <button type="button" id="applyDateRange" class="btn btn-sm btn-primary">Apply</button>
                        <!-- <button type="button" id="clearDateRange" class="btn btn-sm btn-outline-secondary">Clear</button> -->
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Loading indicator -->
        <div id="loadingIndicator" class="text-center mt-2 d-none">
            <div class="spinner-border spinner-border-sm" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span class="text-muted ms-2">Loading data...</span>
        </div>
    </div>
</div>
            
            <!-- Stats Cards Row -->
            <div class="row">
                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-primary-light"><i class="text-primary material-icons md-monetization_on"></i></span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Revenue</h6>
                                <span class="revenue-value">₹<%= totalRevenue.toFixed(2) %></span>
                                <span class="text-sm">
                                    Shipping fees are not included
                                </span>
                            </div>
                        </article>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-success-light"><i class="text-success material-icons md-local_shipping"></i></span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Orders</h6> 
                                <span class="orders-value"><%= totalOrders %></span>
                                <span class="text-sm">
                                    Excluding orders in transit
                                </span>
                            </div>
                        </article>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-warning-light"><i class="text-warning material-icons md-qr_code"></i></span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Products</h6> 
                                <span class="products-value"><%= totalProducts %></span>
                                <span class="text-sm">
                                    In <%= totalCategories %> Categories
                                </span>
                            </div>
                        </article>
                    </div>
                </div>
            </div>
                            
            <!-- Charts Row -->
            <div class="row">
                <div class="col-xl-8 col-lg-12">
                    <div class="card mb-4">
                        <article class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="card-title">Sale Statistics</h5>
                            </div>
                            <div class="chart-container" style="position: relative; height:300px; width:100%; min-height:300px;">
                                <canvas id="myChart"></canvas>
                            </div>
                        </article>
                    </div>
                </div>
                <div class="col-xl-4 col-lg-12">
                    <div class="card mb-4">
                        <article class="card-body">
                            <h5 class="card-title">Best Selling Categories</h5>
                            <div class="chart-container" style="position: relative; height:217px; width:100%; min-height:217px;">
                                <canvas id="myChart2"></canvas>
                            </div>
                        </article>
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-12">
                    <div class="card mb-4">
                        <article class="card-body">
                            <h5 class="card-title">Top 10 Selling Products</h5>
                            <div class="top-products-container" id="topProductsContainer">
                                <% if (topProducts && topProducts.length > 0) { %>
                                    <% topProducts.forEach(product => { %>
                                        <div class="product-progress-item">
                                            <span class="text-muted font-xs"><%= product.productName %></span>
                                            <div class="progress mb-3">
                                                <div class="progress-bar" role="progressbar" data-percentage="<%= product.percentage %>" style="width: 0%"><%= product.percentage %>%</div>
                                            </div>
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                    <span class="text-muted">No product data available</span>
                                <% } %>
                            </div>
                        </article>
                    </div>
                </div>
            </div>
        </section>
    </main>
</body>

<!-- jQuery CDN (must be first) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Bootstrap and other plugins (if you have them locally, keep them, but make sure the path is correct) -->
<script src="/assets/js/vendors/bootstrap.bundle.min.js"></script>
<script src="/assets/js/vendors/select2.min.js"></script>
<script src="/assets/js/vendors/perfect-scrollbar.js"></script>
<!-- Chart.js CDN (must be before your dashboard script) -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<!-- Your main JS (must come after jQuery and Chart.js) -->
<script src="/assets/js/main.js" type="text/javascript"></script>

<script>
document.addEventListener("DOMContentLoaded", async () => {

$(document).ready(function() {
    console.log('Dashboard script initializing...');
    
    // Wait for Chart.js to be fully loaded
    function waitForChart() {
        return new Promise((resolve) => {
            if (typeof Chart !== 'undefined') {
                resolve();
            } else {
                setTimeout(() => waitForChart().then(resolve), 100);
            }
        });
    }
    
    // Initialize after Chart.js is loaded
    waitForChart().then(() => {
        console.log('Chart.js is available, initializing dashboard...');
        initializeDashboard();
        // Set initial progress bar widths
        setProgressBarWidths();
    });
    
    // Declare chart variables at global scope
    let salesChart = null;
    let categoryChart = null;
    
    // Function to set progress bar widths
    function setProgressBarWidths() {
        document.querySelectorAll('.progress-bar[data-percentage]').forEach(bar => {
            const percentage = bar.getAttribute('data-percentage');
            if (percentage) {
                setTimeout(() => {
                    bar.style.width = percentage + '%';
                }, 100);
            }
        });
    }
    
    function initializeDashboard() {
        let weeklyChartData, monthlyChartData, yearlyChartData, categoryData, topProductsData;
        let weeklyStats, monthlyStats, yearlyStats;

        try {
            weeklyChartData = JSON.parse('<%- JSON.stringify(weeklyChartData) %>' || '[]');
            monthlyChartData = JSON.parse('<%- JSON.stringify(monthlyChartData) %>' || '[]');
            yearlyChartData = JSON.parse('<%- JSON.stringify(yearlyChartData) %>' || '[]');
            
            // Parse period-specific category data
            const weeklyCategoryData = JSON.parse('<%- JSON.stringify(weeklyCategoryData || {}) %>');
            const monthlyCategoryData = JSON.parse('<%- JSON.stringify(monthlyCategoryData || {}) %>');
            const yearlyCategoryData = JSON.parse('<%- JSON.stringify(yearlyCategoryData || {}) %>');
            
            // Parse period-specific top products data
            const weeklyTopProducts = JSON.parse('<%- JSON.stringify(weeklyTopProducts || []) %>');
            const monthlyTopProducts = JSON.parse('<%- JSON.stringify(monthlyTopProducts || []) %>');
            const yearlyTopProducts = JSON.parse('<%- JSON.stringify(yearlyTopProducts || []) %>');
            
            // Validate that we have the expected data structure
            console.log('Data validation:', {
                weeklyCategoryData: typeof weeklyCategoryData === 'object' && weeklyCategoryData !== null,
                monthlyCategoryData: typeof monthlyCategoryData === 'object' && monthlyCategoryData !== null,
                yearlyCategoryData: typeof yearlyCategoryData === 'object' && yearlyCategoryData !== null,
                weeklyTopProducts: Array.isArray(weeklyTopProducts),
                monthlyTopProducts: Array.isArray(monthlyTopProducts),
                yearlyTopProducts: Array.isArray(yearlyTopProducts)
            });
            
            // Parse period-specific stats
            weeklyStats = JSON.parse('<%- JSON.stringify(weeklyStats) %>');
            monthlyStats = JSON.parse('<%- JSON.stringify(monthlyStats) %>');
            yearlyStats = JSON.parse('<%- JSON.stringify(yearlyStats) %>');
            
            console.log('Parsed data successfully:', {
                weeklyChartData,
                weeklyCategoryData,
                weeklyTopProducts,
                weeklyStats,
                monthlyCategoryData,
                monthlyTopProducts,
                yearlyCategoryData,
                yearlyTopProducts
            });
            
            // Detailed logging for monthly data
            console.log('Monthly data details:', {
                categoryData: monthlyCategoryData,
                topProducts: monthlyTopProducts,
                categoryLabels: monthlyCategoryData?.labels,
                categoryDataArray: monthlyCategoryData?.data,
                topProductsLength: monthlyTopProducts?.length
            });
            
            const chartData = {
                weekly: {
                    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    data: weeklyChartData,
                    categoryLabels: (weeklyCategoryData && weeklyCategoryData.labels) ? weeklyCategoryData.labels : [],
                    categoryData: (weeklyCategoryData && weeklyCategoryData.data) ? weeklyCategoryData.data : [],
                    topProducts: Array.isArray(weeklyTopProducts) ? weeklyTopProducts : [],
                    stats: weeklyStats
                },
                monthly: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                    data: monthlyChartData,
                    categoryLabels: (monthlyCategoryData && monthlyCategoryData.labels) ? monthlyCategoryData.labels : [],
                    categoryData: (monthlyCategoryData && monthlyCategoryData.data) ? monthlyCategoryData.data : [],
                    topProducts: Array.isArray(monthlyTopProducts) ? monthlyTopProducts : [],
                    stats: monthlyStats
                },
                yearly: {
                    labels: [
                        '<%= new Date().getFullYear() - 5 %>',
                        '<%= new Date().getFullYear() - 4 %>',
                        '<%= new Date().getFullYear() - 3 %>',
                        '<%= new Date().getFullYear() - 2 %>',
                        '<%= new Date().getFullYear() - 1 %>',
                        '<%= new Date().getFullYear() %>'
                    ],
                    data: yearlyChartData,
                    categoryLabels: (yearlyCategoryData && yearlyCategoryData.labels) ? yearlyCategoryData.labels : [],
                    categoryData: (yearlyCategoryData && yearlyCategoryData.data) ? yearlyCategoryData.data : [],
                    topProducts: Array.isArray(yearlyTopProducts) ? yearlyTopProducts : [],
                    stats: yearlyStats
                }
            };
            
            // Debug: Log the final chart data structure
            console.log('Final chart data structure:', {
                weekly: {
                    hasCategoryLabels: chartData.weekly.categoryLabels.length > 0,
                    hasCategoryData: chartData.weekly.categoryData.length > 0,
                    hasTopProducts: chartData.weekly.topProducts.length > 0
                },
                monthly: {
                    hasCategoryLabels: chartData.monthly.categoryLabels.length > 0,
                    hasCategoryData: chartData.monthly.categoryData.length > 0,
                    hasTopProducts: chartData.monthly.topProducts.length > 0
                },
                yearly: {
                    hasCategoryLabels: chartData.yearly.categoryLabels.length > 0,
                    hasCategoryData: chartData.yearly.categoryData.length > 0,
                    hasTopProducts: chartData.yearly.topProducts.length > 0
                }
            });
            
            // Additional debugging for monthly data
            console.log('Monthly data details:', {
                categoryLabels: chartData.monthly.categoryLabels,
                categoryData: chartData.monthly.categoryData,
                topProducts: chartData.monthly.topProducts
            });

            function updateAllCharts(filter) {
                console.log('Updating charts for filter:', filter);
                console.log('Chart data for filter:', chartData[filter]);
                
                // Check if the filter data exists
                if (!chartData[filter]) {
                    console.error('No data available for filter:', filter);
                    return;
                }
                
                console.log('Category data for', filter, ':', {
                    labels: chartData[filter].categoryLabels,
                    data: chartData[filter].categoryData
                });
                
                console.log('Top products for', filter, ':', chartData[filter].topProducts);
                
                updateSalesChart(filter);
                updateCategoryChart(filter);
                updateTopProducts(filter);
                updateStatsCards(filter);
            }
            
            function updateSalesChart(filter) {
                const ctx = document.getElementById('myChart');
                if (!ctx) {
                    console.error('Sales chart canvas not found');
                    return;
                }
                
                console.log('Updating sales chart for:', filter);
                const context = ctx.getContext('2d');
                
                if (salesChart) {
                    salesChart.destroy();
                }
                
                const currentData = chartData[filter];
                if (!currentData || !currentData.data) {
                    console.error('No data available for filter:', filter);
                    return;
                }
                
                console.log('Sales chart data:', currentData.data);
                
                salesChart = new Chart(context, {
                    type: 'line',
                    data: {
                        labels: currentData.labels,
                        datasets: [{
                            label: 'Sales',
                            data: currentData.data,
                            fill: true,
                            backgroundColor: 'rgba(44, 120, 220, 0.2)',
                            borderColor: 'rgba(44, 120, 220)',
                            borderWidth: 2,
                            pointBackgroundColor: 'rgba(44, 120, 220)',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return '₹' + value.toLocaleString();
                                    }
                                }
                            }
                        },
                        animation: {
                            duration: 500
                        },
                        elements: {
                            point: {
                                radius: 3,
                                hoverRadius: 5
                            }
                        }
                    }
                });
                
                console.log('Sales chart created successfully');
            }
            
            function updateCategoryChart(filter) {
                const ctx2 = document.getElementById('myChart2');
                if (!ctx2) {
                    console.error('Category chart canvas not found');
                    return;
                }
                
                console.log('Category chart canvas found:', ctx2);
                console.log('Canvas dimensions:', ctx2.width, 'x', ctx2.height);
                
                console.log('Updating category chart for:', filter);
                const context2 = ctx2.getContext('2d');
                
                if (categoryChart) {
                    categoryChart.destroy();
                }
                
                const currentData = chartData[filter];
                console.log('Category chart data for', filter, ':', currentData);
                
                if (!currentData || !currentData.categoryLabels || currentData.categoryLabels.length === 0) {
                    console.warn('No category data available for filter:', filter);
                    // Show empty state
                    context2.clearRect(0, 0, ctx2.width, ctx2.height);
                    context2.fillStyle = '#666';
                    context2.font = '14px Arial';
                    context2.textAlign = 'center';
                    context2.fillText('No category data available for ' + filter + ' period', ctx2.width / 2, ctx2.height / 2);
                    return;
                }
                
                console.log('Category chart data:', {
                    labels: currentData.categoryLabels,
                    data: currentData.categoryData
                });
                
                categoryChart = new Chart(context2, {
                    type: 'doughnut',
                    data: {
                        labels: currentData.categoryLabels,
                        datasets: [{
                            data: currentData.categoryData,
                            backgroundColor: [
                                '#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff',
                                '#ff9f40', '#c9cbcf', '#66ff99', '#ff66cc', '#666699'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: {
                                    boxWidth: 12,
                                    font: {
                                        size: 11
                                    }
                                }
                            }
                        },
                        animation: {
                            duration: 500
                        },
                        cutout: '70%'
                    }
                });
                
                console.log('Category chart created successfully');
            }
            
            function updateTopProducts(filter) {
                const container = document.getElementById('topProductsContainer');
                if (!container) {
                    console.error('Top products container not found');
                    return;
                }
                
                console.log('Top products container found:', container);
                console.log('Container innerHTML length:', container.innerHTML.length);
                
                const currentData = chartData[filter];
                const products = currentData && currentData.topProducts ? currentData.topProducts : [];
                console.log('Updating top products for', filter, ':', products);
                console.log('Current data for', filter, ':', currentData);
                
                if (products && products.length > 0) {
                    let html = '';
                    products.forEach(product => {
                        html += `
                        <div class="product-progress-item">
                            <span class="text-muted font-xs">${product.productName || 'Unknown Product'}</span>
                            <div class="progress mb-3">
                                <div class="progress-bar" role="progressbar" data-percentage="${product.percentage || 0}" style="width: 0%">${product.percentage || 0}%</div>
                            </div>
                        </div>
                        `;
                    });
                    container.innerHTML = html;
                } else {
                    container.innerHTML = '<span class="text-muted">No product data available for ' + filter + ' period</span>';
                }
                
                // Set progress bar widths after updating content
                setTimeout(setProgressBarWidths, 50);
            }
            
            function updateStatsCards(filter) {
                const currentData = chartData[filter];
                const stats = currentData && currentData.stats ? currentData.stats : {};
                console.log('Updating stats cards:', stats);
                
                // Update revenue
                const revenueElement = document.querySelector('.revenue-value');
                if (revenueElement) {
                    revenueElement.innerHTML = '₹' + (stats.revenue || 0).toFixed(2);
                }
                
                // Update orders
                const ordersElement = document.querySelector('.orders-value');
                if (ordersElement) {
                    ordersElement.innerHTML = stats.orders || 0;
                }
                
                // Update products (this typically doesn't change by period, but we update it anyway)
                const productsElement = document.querySelector('.products-value');
                if (productsElement) {
                    productsElement.innerHTML = stats.products || 0;
                }
            }
            
            // Initialize with weekly data
            console.log('Initializing charts with weekly data...');
            updateAllCharts('weekly');
            
            // Filter button click handlers
            $('.global-filter-btn').on('click', function() {
                const filter = $(this).data('filter');
                console.log('Filter clicked:', filter);
                console.log('Available chart data for', filter, ':', chartData[filter]);
                
                if (filter !== 'custom') {
                    $('.global-filter-btn').removeClass('active');
                    $(this).addClass('active');
                    
                    // Test monthly filter specifically
                    if (filter === 'monthly') {
                        console.log('Monthly filter clicked - testing data...');
                        console.log('Monthly category data:', chartData.monthly.categoryLabels, chartData.monthly.categoryData);
                        console.log('Monthly top products:', chartData.monthly.topProducts);
                    }
                    
                    updateAllCharts(filter);
                }
            });
            
            // Initialize the date range filter
            initializeDateRangeFilter();
            
            console.log('Dashboard initialization complete');
        } catch (error) {
            console.error('Error initializing dashboard:', error);
        }
    }

    // Add date range functionality
    function initializeDateRangeFilter() {
        const customBtn = $('.global-filter-btn[data-filter="custom"]');
        const dateRangeContainer = $('#dateRangeContainer');
        const startDateInput = $('#startDate');
        const endDateInput = $('#endDate');
        const applyBtn = $('#applyDateRange');
        const clearBtn = $('#clearDateRange');
        const loadingIndicator = $('#loadingIndicator');
        
        // Set max date to today
        const today = new Date().toISOString().split('T')[0];
        startDateInput.attr('max', today);
        endDateInput.attr('max', today);
        
        // Show/hide date range inputs
        customBtn.on('click', function() {
            if ($(this).hasClass('active')) {
                // If already active, just show the date inputs
                dateRangeContainer.removeClass('d-none');
            } else {
                // Make this button active and show inputs
                $('.global-filter-btn').removeClass('active');
                $(this).addClass('active');
                dateRangeContainer.removeClass('d-none');
            }
        });
        
        // Hide date inputs when other filters are selected
        $('.global-filter-btn:not([data-filter="custom"])').on('click', function() {
            dateRangeContainer.addClass('d-none');
            loadingIndicator.addClass('d-none');
        });
        
        // Validate date inputs
        startDateInput.on('change', function() {
            const startDate = $(this).val();
            if (startDate) {
                endDateInput.attr('min', startDate);
            }
        });
        
        endDateInput.on('change', function() {
            const endDate = $(this).val();
            if (endDate) {
                startDateInput.attr('max', endDate);
            }
        });
        
        // Apply date range filter
        applyBtn.on('click', function() {
            const startDate = startDateInput.val();
            const endDate = endDateInput.val();
            
            if (!startDate || !endDate) {
                alert('Please select both start and end dates');
                return;
            }
            
            if (new Date(startDate) > new Date(endDate)) {
                alert('Start date cannot be later than end date');
                return;
            }
            
            loadingIndicator.removeClass('d-none');
            applyDateRangeFilter(startDate, endDate);
        });
        
        // Clear date range
        clearBtn.on('click', function() {
            startDateInput.val('');
            endDateInput.val('');
            startDateInput.removeAttr('max');
            endDateInput.removeAttr('min');
            startDateInput.attr('max', today);
            endDateInput.attr('max', today);
            
            // Switch back to weekly view
            $('.global-filter-btn').removeClass('active');
            $('.global-filter-btn[data-filter="weekly"]').addClass('active');
            dateRangeContainer.addClass('d-none');
            loadingIndicator.addClass('d-none');
            updateAllCharts('weekly');
        });
    }

    // Function to apply date range filter
    function applyDateRangeFilter(startDate, endDate) {
        $.ajax({
            url: '/admin/dashboard/daterange',
            method: 'GET',
            data: { startDate, endDate },
            success: function(response) {
                console.log('Date range data received:', response);
                
                // Update charts with custom date range data
                updateChartsWithCustomData(response, startDate, endDate);
                
                $('#loadingIndicator').addClass('d-none');
            },
            error: function(xhr, status, error) {
                console.error('Error fetching date range data:', error);
                alert('Error loading data for the selected date range. Please try again.');
                $('#loadingIndicator').addClass('d-none');
            }
        });
    }

    // Function to update charts with custom date range data
    function updateChartsWithCustomData(data, startDate, endDate) {
        // Update sales chart
        const salesCtx = document.getElementById('myChart');
        if (salesChart) {
            salesChart.destroy();
        }
        
        if (salesCtx && data.chartData) {
            const context = salesCtx.getContext('2d');
            salesChart = new Chart(context, {
                type: 'line',
                data: {
                    labels: data.chartData.labels || [],
                    datasets: [{
                        label: 'Sales',
                        data: data.chartData.data || [],
                        fill: true,
                        backgroundColor: 'rgba(44, 120, 220, 0.2)',
                        borderColor: 'rgba(44, 120, 220)',
                        borderWidth: 2,
                        pointBackgroundColor: 'rgba(44, 120, 220)',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: `Sales Data (${formatDateForDisplay(startDate)} - ${formatDateForDisplay(endDate)})`
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '₹' + value.toLocaleString();
                                }
                            }
                        }
                    },
                    animation: {
                        duration: 500
                    }
                }
            });
        }
        
        // Update category chart
        const categoryCtx = document.getElementById('myChart2');
        if (categoryChart) {
            categoryChart.destroy();
        }
        
        if (categoryCtx && data.categoryData && data.categoryData.labels && data.categoryData.labels.length > 0) {
            const context2 = categoryCtx.getContext('2d');
            categoryChart = new Chart(context2, {
                type: 'doughnut',
                data: {
                    labels: data.categoryData.labels,
                    datasets: [{
                        data: data.categoryData.data || [],
                        backgroundColor: [
                            '#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff',
                            '#ff9f40', '#c9cbcf', '#66ff99', '#ff66cc', '#666699'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                boxWidth: 12,
                                font: { size: 11 }
                            }
                        }
                    },
                    animation: { duration: 500 },
                    cutout: '70%'
                }
            });
        }
        
        // Update top products
        const topProductsContainer = document.getElementById('topProductsContainer');
        if (topProductsContainer) {
            if (data.topProducts && data.topProducts.length > 0) {
                let html = '';
                data.topProducts.forEach(product => {
                    html += `
                        <div class="product-progress-item">
                            <span class="text-muted font-xs">${product.productName || 'Unknown Product'}</span>
                            <div class="progress mb-3">
                                <div class="progress-bar" role="progressbar" data-percentage="${product.percentage || 0}" style="width: 0%">${product.percentage || 0}%</div>
                            </div>
                        </div>
                    `;
                });
                topProductsContainer.innerHTML = html;
            } else {
                topProductsContainer.innerHTML = '<span class="text-muted">No product data available for selected range</span>';
            }
            
            // Set progress bar widths after updating content
            setTimeout(setProgressBarWidths, 50);
        }
        
        // Update stats cards
        if (data.stats) {
            const revenueElement = document.querySelector('.revenue-value');
            if (revenueElement) {
                revenueElement.innerHTML = '₹' + (data.stats.revenue || 0).toFixed(2);
            }
            
            const ordersElement = document.querySelector('.orders-value');
            if (ordersElement) {
                ordersElement.innerHTML = data.stats.orders || 0;
            }
            
            const productsElement = document.querySelector('.products-value');
            if (productsElement) {
                productsElement.innerHTML = data.stats.products || 0;
            }
        }
    }

    // Helper function to format date for display
    function formatDateForDisplay(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', { 
            day: '2-digit', 
            month: 'short', 
            year: 'numeric' 
        });
    }

    // Sidebar toggle functionality
    $('.btn-aside-minimize, #mobile-menu-toggle').on('click', function(e) {
        e.preventDefault();
        console.log('Toggle clicked');
        $('#offcanvas_aside').toggleClass('show');
        $('body').toggleClass('sidebar-open');
        $('#sidebarOverlay').toggleClass('active');
    });

    // Close sidebar when clicking outside on mobile
    $(document).on('click', function(e) {
        if (window.innerWidth <= 991 && 
            !$(e.target).closest('#offcanvas_aside, .btn-aside-minimize, #mobile-menu-toggle, #sidebarOverlay').length && 
            $('#offcanvas_aside').hasClass('show')) {
            $('#offcanvas_aside').removeClass('show');
            $('body').removeClass('sidebar-open');
            $('#sidebarOverlay').removeClass('active');
        }
    });
});

// Sidebar toggle for dashboard (category style)
document.addEventListener('DOMContentLoaded', function () {
    const sidebar = document.getElementById('offcanvas_aside');
    const overlay = document.getElementById('sidebarOverlay');
    const hamburger = document.getElementById('sidebarHamburger');
    function openSidebar() {
        sidebar.classList.add('show');
        overlay.classList.add('active');
        document.getElementById('mainWrap').classList.add('dimmed');
        hamburger.setAttribute('aria-expanded', 'true');
        document.body.style.overflow = 'hidden';
    }
    function closeSidebar() {
        sidebar.classList.remove('show');
        overlay.classList.remove('active');
        document.getElementById('mainWrap').classList.remove('dimmed');
        hamburger.setAttribute('aria-expanded', 'false');
        document.body.style.overflow = '';
    }
    hamburger.addEventListener('click', function() {
        if (sidebar.classList.contains('show')) {
            closeSidebar();
        } else {
            openSidebar();
        }
    });
    overlay.addEventListener('click', closeSidebar);
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && sidebar.classList.contains('show')) {
            closeSidebar();
        }
    });
    window.addEventListener('resize', function() {
        if (window.innerWidth >= 992) {
            closeSidebar();
        }
    });
});

});
</script>
<!DOCTYPE HTML>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Shoestore Dashboard</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:title" content="">
    <meta property="og:type" content="">
    <meta property="og:url" content="">
    <meta property="og:image" content="">
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="assets2/imgs/theme/favicon.svg">
    <!-- Template CSS -->
    <link href="/assets2/css/main.css" rel="stylesheet"/>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .navbar-aside {
            width: 280px;
            height: 100%;
            position: fixed;
            top: 0;
            left: 0;
            background: #fff;
            z-index: 1000;
            transition: all 0.3s ease;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .main-wrap {
            margin-left: 280px;
            transition: all 0.3s ease;
        }
        .screen-overlay {
            width: 100%;
            height: 100%;
            z-index: 999;
            position: fixed;
            top: 0;
            left: 0;
            background: rgba(0,0,0,0.5);
            display: none;
        }
        .btn-offer {
            background-color: #ff6b35;
            border-color: #ff6b35;
            color: white;
        }
        .btn-offer:hover {
            background-color: #e55a2b;
            border-color: #e55a2b;
            color: white;
        }
        @media (max-width: 991px) {
            .navbar-aside {
                transform: translateX(-100%);
            }
            .main-wrap {
                margin-left: 0;
            }
            .navbar-aside.show {
                transform: translateX(0);
            }
        }
    </style>
</head>

<body>
    <div class="screen-overlay"></div>
    <aside class="navbar-aside" id="offcanvas_aside">
        <div class="aside-top">
            <a href="/admin/dashboard" class="brand-wrap">
                <img src="/assets/imgs/theme/shoestore-logo.svg" class="logo" alt="Shoestore Dashboard">
            </a>
            <div>
                <button class="btn btn-icon btn-aside-minimize"> <i class="text-muted material-icons md-menu_open"></i> </button>
            </div>
        </div>
        <nav>
             <ul class="menu-aside">
                <li class="menu-item active">
                    <a class="menu-link" href="/admin/dashboard"> <i class="icon material-icons md-home"></i>
                        <span class="text">Dashboard</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/users"> <i class="icon material-icons md-person"></i>
                        <span class="text">Customers</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/products"> <i class="icon material-icons md-shopping_bag"></i>
                        <span class="text">Products</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/orders"> <i class="icon material-icons md-shopping_cart"></i>
                        <span class="text">Orders</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/category"> <i class="icon material-icons md-store"></i>
                        <span class="text">Category</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/coupons"> <i class="icon material-icons md-local_offer"></i>
                        <span class="text">Coupons</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/sales"> <i class="icon material-icons md-assessment"></i>
                        <span class="text">Sales Report</span>
                    </a>
                </li>
                 <li class="menu-item">
                    <a class="menu-link" href="/admin/logout"> <i class="icon material-icons md-exit_to_app"></i>
                        <span class="text">Sign Out</span>
                    </a>
                </li>
                
            </ul>
            <br>
            <br>
        </nav>
    </aside>
    <main class="main-wrap">
        <header class="main-header navbar">
            <div class="col-search">
                <form id="searchform" class="searchform">
                    <div class="input-group">
                        <input list="search_terms" name = "searchQuery" id = "searchQuery" type="text" class="form-control" placeholder="Search...">
                        <button class="btn btn-light bg" type="submit"> <i class="material-icons md-search"></i></button>
                    </div>
                   
                </form>
            </div>
            
        </header>
        <section class="content-main">
            <div class="content-header">
                <div>
                    <h2 class="content-title card-title">Categories </h2>
                    <p>Add, edit or delete a category</p>
                </div>
                
            </div>
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <form id="categoryForm" onsubmit="return handleFormSubmit(event)">
                                <div class="mb-4">
                                    <label for="product_name" class="form-label">Name</label>
                                    <input type="text" placeholder="Type here" class="form-control" id="product_name" name="name" >
                                    <div id="name-error" class="error-message" style="color: red; display: none;"></div>
                                </div>
                                <!-- <div class="mb-4">
                                    <label class="form-label">Parent</label>
                                    <select class="form-select" name="parent">
                                        <option value="">None</option>
                                        <% cat.forEach((category) => { %>
                                            <option value="<%= category._id %>"><%= category.name %></option>
                                        <% }) %>
                                    </select>
                                </div> -->
                                <div class="mb-4">
                                    <label class="form-label">Description</label>
                                    <textarea placeholder="Type here" class="form-control" id="descriptionId" name="description" ></textarea>
                                    <div id="description-error" class="error-message" style="color: red; display: none;"></div>
                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Status</label>
                                    <select class="form-select" name="isListed">
                                        <option value="true">Active</option>
                                        <option value="false">Inactive</option>
                                    </select>
                                </div>
                                <div class="d-grid">
                                    <button type="submit" class="btn btn-primary">Create category</button>
                                </div>
                            </form>
                        </div>
                        <div class="col-md-9">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            
                                            <th>ID</th>
                                            <th>Name</th>
                                            <th>Description</th>
                                            <th>Offer</th>
                                            <th>Status</th>
                                            <th class="text-end">Edit</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% cat.forEach((category) => { %>
                                        <tr>
                                            
                                            <td><%= category.categoryId %></td>
                                            <td><b><%= category.name %></b></td>
                                            <td><%= category.description %></td>
                                            <td>
                                                <% if (category.categoryOffer && category.categoryOffer > 0) { %>
                                                    <span class="badge bg-success"><%= category.categoryOffer %>% OFF</span>
                                                <% } else { %>
                                                    <span class="text-muted">No offer</span>
                                                <% } %>
                                            </td>
                                           
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <span class="me-2 <%= category.isListed ? 'text-success' : 'text-danger' %>">
                                                        <%= category.isListed ? 'Listed' : 'Unlisted' %>
                                                    </span>
                                                    <div class="form-check form-switch">
                                                        <input class="form-check-input" type="checkbox" 
                                                            <%= category.isListed ? 'checked' : '' %> 
                                                            onchange="toggleCategoryStatus('<%= category._id %>', this.checked)">
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="text-end">
                                                <!-- Offer Button -->
                                                <button class="btn btn-offer btn-sm me-2" onclick="openCategoryOfferModal('<%= category._id %>', '<%= category.name %>', '<%= category.categoryOffer %>')">
                                                    <i class="fas fa-tags me-1"></i>Offer
                                                </button>
                                                <a href="/admin/editCategory/<%= category._id %>" class="btn btn-primary btn-sm me-2">
                                                    <i class="material-icons md-edit"></i> Edit
                                                </a>
                                                
                                            </td>
                                        </tr>
                                        <% }) %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Pagination -->
            <div class="pagination-container mt-4">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <% if (currentPage > 1) { %>
                            <li class="page-item">
                                <a class="page-link" href="/admin/category?page=<%= currentPage - 1 %>" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                        <% } %>
                        
                        <% for(let i = 1; i <= totalPages; i++) { %>
                            <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                <a class="page-link" href="/admin/category?page=<%= i %>"><%= i %></a>
                            </li>
                        <% } %>
                        
                        <% if (currentPage < totalPages) { %>
                            <li class="page-item">
                                <a class="page-link" href="/admin/category?page=<%= currentPage + 1 %>" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        <% } %>
                    </ul>
                </nav>
                <div class="text-center mt-2">
                    <small class="text-muted">Showing <%= (currentPage - 1) * 4 + 1 %> to <%= Math.min(currentPage * 4, totalCategories) %> of <%= totalCategories %> categories</small>
                </div>
            </div>
        </section>
    </main>

    <!-- Category Offer Modal -->
    <div class="modal fade" id="categoryOfferModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-tags me-2"></i>Manage Category Offer
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <strong>Category:</strong> <span id="categoryOfferName"></span>
                    </div>
                    <div class="mb-3">
                        <label for="categoryDiscountPercentage" class="form-label">Discount Percentage (%)</label>
                        <input type="number" class="form-control" id="categoryDiscountPercentage" min="0" max="100" step="0.01">
                        <div class="form-text">Enter 0 to remove offer</div>
                    </div>
                    <div class="alert alert-info" id="currentCategoryOfferInfo" style="display: none;">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Current Offer:</strong> <span id="currentCategoryOfferText"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" onclick="applyCategoryOffer()">
                        <i class="fas fa-check me-1"></i>Apply Offer
                    </button>
                    <button type="button" class="btn btn-danger" onclick="removeCategoryOffer()">
                        <i class="fas fa-times me-1"></i>Remove Offer
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        function handleFormSubmit(event) {
            event.preventDefault();
            if (!validateForm()) {
                return false;
            }

            const form = document.getElementById('categoryForm');
            const formData = {
                name: form.querySelector('[name="name"]').value,
                description: form.querySelector('[name="description"]').value,
                isListed: form.querySelector('[name="isListed"]').value === "true",
            };

            fetch('/admin/addCategory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.error);
                    });
                }
                return response.json();
            })
            .then(data => {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Category added successfully',
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    location.reload();
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: error.message || 'An error occurred while adding the category'
                });
            });
        }

        function validateForm() {
            clearErrorMessage();
            const name = document.getElementById("product_name").value.trim();
            const description = document.getElementById("descriptionId").value.trim();
            let isValid = true;

            if (name === "") {
                displayErrorMessage("name-error", "Please enter a category name");
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(name)) {
                displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
                isValid = false;
            }

            if (description === "") {
                displayErrorMessage("description-error", "Please enter a description");
                isValid = false;
            }

            return isValid;
        }

        function displayErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }

        function clearErrorMessage() {
            const errorElements = document.getElementsByClassName("error-message");
            Array.from(errorElements).forEach((element) => {
                element.innerText = "";
                element.style.display = "none";
            });
        }

        // function toggleCategoryStatus(categoryId, isListed) {
        //     const url = isListed ? '/admin/listCategory' : '/admin/unlistCategory';
        //     fetch(`${url}?id=${categoryId}`, {
        //         method: 'GET',
        //         headers: {
        //             'Content-Type': 'application/json'
        //         }
        //     })
        //     .then(response => {
        //         if (!response.ok) {
        //             throw new Error('Failed to update category status');
        //         }
        //         Swal.fire({
        //             icon: 'success',
        //             title: 'Success!',
        //             text: `Category ${isListed ? 'listed' : 'unlisted'} successfully`,
        //             showConfirmButton: false,
        //             timer: 1500
        //         }).then(()=>{
        //             window.location.reload()
        //         });
        //     })
        //     .catch(error => {
        //         Swal.fire({
        //             icon: 'error',
        //             title: 'Oops...',
        //             text: 'Failed to update category status'
        //         });
        //     });
        // }
        function toggleCategoryStatus(categoryId, isListed) {
    // Add warning confirmation before taking action
    Swal.fire({
        title: 'Are you sure?',
        text: `Do you want to ${isListed ? 'list' : 'unlist'} this category?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: `Yes, ${isListed ? 'list' : 'unlist'} it!`
    }).then((result) => {
        if (result.isConfirmed) {
            const url = isListed ? '/admin/listCategory' : '/admin/unlistCategory';
            fetch(`${url}?id=${categoryId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to update category status');
                }
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: `Category ${isListed ? 'listed' : 'unlisted'} successfully`,
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    window.location.reload()
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Failed to update category status'
                });
            });
        }
    });
}
        function deleteCategory(categoryId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/deleteCategory?id=${categoryId}`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to delete category');
                        }
                        Swal.fire({
                            icon: 'success',
                            title: 'Deleted!',
                            text: 'Category has been deleted.',
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {
                            location.reload();
                        });
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Failed to delete category'
                        });
                    });
                }
            });
        }

        const search = document.getElementById("searchform")
        search.addEventListener("submit",async function (){
            const searchQuery = document.getElementById("searchQuery")

            window.location.href=`/admin/category?${searchQuery}`
        })

        // Category Offer Management
        let currentCategoryId;
        let categoryOfferModal;

        // Initialize modal when DOM is loaded and Bootstrap is available
        function initializeModal() {
            if (typeof bootstrap !== 'undefined' && document.getElementById('categoryOfferModal')) {
                categoryOfferModal = new bootstrap.Modal(document.getElementById('categoryOfferModal'));
            } else {
                // Retry after a short delay if Bootstrap is not loaded yet
                setTimeout(initializeModal, 100);
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            initializeModal();
            
            // Add event listeners for modal close buttons
            const closeButtons = document.querySelectorAll('[data-bs-dismiss="modal"]');
            closeButtons.forEach(button => {
                button.addEventListener('click', closeCategoryOfferModal);
            });
            
            // Add event listener for backdrop click
            const modalElement = document.getElementById('categoryOfferModal');
            if (modalElement) {
                modalElement.addEventListener('click', function(e) {
                    if (e.target === modalElement) {
                        closeCategoryOfferModal();
                    }
                });
            }
        });

        function openCategoryOfferModal(categoryId, categoryName, currentOffer) {
            // Ensure modal is initialized
            if (!categoryOfferModal) {
                initializeModal();
            }
            
            currentCategoryId = categoryId;
            document.getElementById('categoryOfferName').textContent = categoryName;
            document.getElementById('categoryDiscountPercentage').value = currentOffer || '';
            
            const currentCategoryOfferInfo = document.getElementById('currentCategoryOfferInfo');
            const currentCategoryOfferText = document.getElementById('currentCategoryOfferText');
            
            if (currentOffer && currentOffer > 0) {
                currentCategoryOfferText.textContent = `${currentOffer}% discount active`;
                currentCategoryOfferInfo.style.display = 'block';
            } else {
                currentCategoryOfferInfo.style.display = 'none';
            }
            
            // Check if modal is available before showing
            if (categoryOfferModal) {
                categoryOfferModal.show();
            } else {
                // Fallback: show modal using vanilla JavaScript
                const modalElement = document.getElementById('categoryOfferModal');
                if (modalElement) {
                    modalElement.style.display = 'block';
                    modalElement.classList.add('show');
                    document.body.classList.add('modal-open');
                    
                    // Add backdrop
                    const backdrop = document.createElement('div');
                    backdrop.className = 'modal-backdrop fade show';
                    backdrop.id = 'modalBackdrop';
                    document.body.appendChild(backdrop);
                } else {
                    console.error('Modal element not found');
                    alert('Modal not available. Please refresh the page.');
                }
            }
        }

        // Helper function to close modal with fallback support
        function closeCategoryOfferModal() {
            if (categoryOfferModal) {
                categoryOfferModal.hide();
            } else {
                // Fallback: close modal using vanilla JavaScript
                const modalElement = document.getElementById('categoryOfferModal');
                if (modalElement) {
                    modalElement.style.display = 'none';
                    modalElement.classList.remove('show');
                    document.body.classList.remove('modal-open');
                    
                    // Remove backdrop
                    const backdrop = document.getElementById('modalBackdrop');
                    if (backdrop) {
                        backdrop.remove();
                    }
                }
            }
        }

        async function applyCategoryOffer() {
    const discountPercentage = document.getElementById('categoryDiscountPercentage').value;
    
    if (!discountPercentage || discountPercentage < 0 || discountPercentage > 100) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Input',
            text: 'Please enter a valid discount percentage between 0 and 100'
        });
        return;
    }

    try {
        console.log('=== DEBUG: Apply Category Offer ===');
        console.log('Category ID:', currentCategoryId);
        console.log('Discount Percentage:', discountPercentage);
        console.log('Request URL:', '/admin/category/apply-offer');

        const response = await fetch('/admin/category/apply-offer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                categoryId: currentCategoryId,
                discountPercentage: parseFloat(discountPercentage)
            })
        });

        console.log('Response Status:', response.status);
        console.log('Response Status Text:', response.statusText);
        console.log('Response URL:', response.url);
        
        // Get the raw response text first
        const responseText = await response.text();
        console.log('Raw Response (first 500 chars):', responseText.substring(0, 500));
        
        // Check if it's HTML (starts with <!DOCTYPE or <html)
        if (responseText.trim().startsWith('<!DOCTYPE') || responseText.trim().startsWith('<html')) {
            console.error('ERROR: Server returned HTML instead of JSON');
            console.error('This usually means:');
            console.error('1. Route not found (404 page)');
            console.error('2. Authentication failed (login redirect)');
            console.error('3. Server error (error page)');
            
            Swal.fire({
                icon: 'error',
                title: 'Server Error',
                html: `Server returned HTML instead of JSON.<br>
                       Status: ${response.status}<br>
                       Check console for details.`
            });
            return;
        }

        // Try to parse as JSON
        let result;
        try {
            result = JSON.parse(responseText);
        } catch (parseError) {
            console.error('JSON Parse Error:', parseError);
            console.error('Response was not valid JSON:', responseText);
            Swal.fire({
                icon: 'error',
                title: 'Invalid Response',
                text: 'Server returned invalid JSON response'
            });
            return;
        }

        console.log('Parsed JSON Result:', result);
        
        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: result.message,
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                closeCategoryOfferModal();
                location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: result.message || 'Failed to apply category offer'
            });
        }
    } catch (error) {
        console.error('Fetch Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Network Error!',
            text: 'Failed to connect to server. Check your connection.'
        });
    }
}

async function removeCategoryOffer() {
    const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to remove this category offer?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, remove it!'
    });

    if (!result.isConfirmed) {
        return;
    }

    try {
        console.log('=== DEBUG: Remove Category Offer ===');
        console.log('Category ID:', currentCategoryId);
        console.log('Request URL:', '/admin/category/remove-offer');

        const response = await fetch('/admin/category/remove-offer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                categoryId: currentCategoryId
            })
        });

        console.log('Response Status:', response.status);
        console.log('Response Status Text:', response.statusText);
        console.log('Response URL:', response.url);
        
        // Get the raw response text first
        const responseText = await response.text();
        console.log('Raw Response (first 500 chars):', responseText.substring(0, 500));
        
        // Check if it's HTML (starts with <!DOCTYPE or <html)
        if (responseText.trim().startsWith('<!DOCTYPE') || responseText.trim().startsWith('<html')) {
            console.error('ERROR: Server returned HTML instead of JSON');
            console.error('This usually means:');
            console.error('1. Route not found (404 page)');
            console.error('2. Authentication failed (login redirect)');
            console.error('3. Server error (error page)');
            
            Swal.fire({
                icon: 'error',
                title: 'Server Error',
                html: `Server returned HTML instead of JSON.<br>
                       Status: ${response.status}<br>
                       Check console for details.`
            });
            return;
        }

        // Try to parse as JSON
        let result;
        try {
            result = JSON.parse(responseText);
        } catch (parseError) {
            console.error('JSON Parse Error:', parseError);
            console.error('Response was not valid JSON:', responseText);
            Swal.fire({
                icon: 'error',
                title: 'Invalid Response',
                text: 'Server returned invalid JSON response'
            });
            return;
        }

        console.log('Parsed JSON Result:', result);
        
        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: result.message,
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                closeCategoryOfferModal();
                location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: result.message || 'Failed to remove category offer'
            });
        }
    } catch (error) {
        console.error('Fetch Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Network Error!',
            text: 'Failed to connect to server. Check your connection.'
        });
    }
}
    </script>
    
    <!-- Bootstrap JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
        